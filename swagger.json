{
  "swagger": "2.0",
  "info": {
    "description": "Access Sponge powered Minecraft servers through a WebAPI\n\n# Introduction\nThis is the documentation of the various API routes offered by the WebAPI plugin.\n\nThis documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.\n\nBy default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...\n\nAs a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft).\nThis route should show you basic information about your server, like the motd and player count.\n\n# List endpoints\nLots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).\n\n> Remember that in this case the data returned by the endpoint might be quite large.\n\n# Debugging endpoints\nApart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:\n\n`details`: Includes details for list endpoints\n\n`accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**\n\n`pretty`: Pretty prints the data, also good for debugging in the browser.\n\nAn example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`\n\n# Additional data\nCertain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.\n\nYou can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)",
    "version": "@version@",
    "title": "Web-API",
    "contact": {
      "name": "Valandur",
      "url": "https://github.com/Valandur",
      "email": "inithilian@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/Valandur/Web-API/blob/master/LICENSE"
    }
  },
  "basePath": "/api/v5",
  "tags": [{
    "name": "Registry",
    "description": "Query Sponge registry values, such as DimensionTypes and EntityTypes."
  }, {
    "name": "Economy",
    "description": "Manage the economy on your server"
  }, {
    "name": "MMC Restrict",
    "description": "Manage restricted items on your server."
  }, {
    "name": "Web Books",
    "description": "Create, edit and delete web books that have unique links which work on your server in-game."
  }, {
    "name": "Chunk",
    "description": "Get and force load certain chunks of a world"
  }, {
    "name": "Interactive Message",
    "description": "Send (interactive) messages to clients."
  }, {
    "name": "History",
    "description": "Provides access to the command and chat history."
  }, {
    "name": "Player",
    "description": "List all players and get detailed information about them."
  }, {
    "name": "Nucleus",
    "description": "Manage your kits and jails"
  }, {
    "name": "Active Time",
    "description": "Keep track of the play time of players on your server."
  }, {
    "name": "Red Protect",
    "description": "Create, edit and delete protected regions on your server"
  }, {
    "name": "Husky Crates",
    "description": "Create, edit and delete the crate types on your server, without having to restart it."
  }, {
    "name": "Info",
    "description": "Get information and stats about the Minecraft server"
  }, {
    "name": "Map",
    "description": "Get maps of the biomes for each world on the server"
  }, {
    "name": "Permission",
    "description": "Manage permissions on the server"
  }, {
    "name": "Plugin",
    "description": "List all plugins and get detailed information about them."
  }, {
    "name": "Entity",
    "description": "List all entities and get detailed information about them."
  }, {
    "name": "Universal Market",
    "description": "View the current items on the market"
  }, {
    "name": "Block",
    "description": "Get information about blocks and manipulate them."
  }, {
    "name": "Server",
    "description": "Prodives information about the server, such as server propertiers"
  }, {
    "name": "Recipe",
    "description": "List all recipes available on the server"
  }, {
    "name": "User",
    "description": "Authenticate and get user information."
  }, {
    "name": "World",
    "description": "List all worlds and get detailed information about them."
  }, {
    "name": "Tile Entity",
    "description": "List all tile entities and get detailed information about them."
  }, {
    "name": "Command",
    "description": "List all commands on the server and execute them."
  }, {
    "name": "MMC Tickets",
    "description": "View, assign and reply-to tickets on the server."
  }],
  "consumes": ["application/json", "application/xml"],
  "produces": ["application/json", "application/xml"],
  "paths": {
    "/active-time": {
      "get": {
        "tags": ["Active Time"],
        "summary": "Server report",
        "description": "Generates a report for the whole server from week ago until now  \n\n **Required permissions:**  \n\n- **active-time.report.server**  \n",
        "operationId": "getServerReport",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerReport"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/active-time/user/{uuid}": {
      "get": {
        "tags": ["Active Time"],
        "summary": "User report",
        "description": "Generates a report for a specific user from a week ago until now  \n\n **Required permissions:**  \n\n- **active-time.report.user**  \n",
        "operationId": "getUserReport",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserReport"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/block/op": {
      "get": {
        "tags": ["Block"],
        "summary": "List block operations",
        "description": "Returns a list of all the currently running block operations.  \n\n **Required permissions:**  \n\n- **block.op.list**  \n",
        "operationId": "listBlockOperations",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockOperation"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Block"],
        "summary": "Create a block operation",
        "description": "Start a request to get or change blocks on the server.  \n\n **Required permissions:**  \n\n- **block.op.create**  \n",
        "operationId": "createBlockOperation",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/CreateBlockOperationRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockOperation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/block/op/{uuid}": {
      "get": {
        "tags": ["Block"],
        "summary": "Get a block operation",
        "description": "Gets details about a specific block operation  \n\n **Required permissions:**  \n\n- **block.op.one**  \n",
        "operationId": "getBlockOperation",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "description": "The uuid of the block operation",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockOperation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Block"],
        "summary": "Modify a block operation",
        "description": "Modify an existing block operation to either pause or continue it.  \n\n **Required permissions:**  \n\n- **block.op.modify**  \n",
        "operationId": "modifyBlockOperation",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "description": "The uuid of the block operation",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ModifyBlockOperationRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockOperation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Block"],
        "summary": "Stop a block operation",
        "description": "Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  \n\n **Required permissions:**  \n\n- **block.op.delete**  \n",
        "operationId": "deleteBlockOperation",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "description": "The uuid of the block operation",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockOperation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/block/{world}/{x}/{y}/{z}": {
      "get": {
        "tags": ["Block"],
        "summary": "Get a block",
        "description": "Gets information about one block in the world.  \n\n **Required permissions:**  \n\n- **block.one**  \n",
        "operationId": "getBlock",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world to get the block from",
          "required": true,
          "type": "string"
        }, {
          "name": "x",
          "in": "path",
          "description": "The x-coordinate of the block",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "y",
          "in": "path",
          "description": "The y-coordinate of the block",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "z",
          "in": "path",
          "description": "The z-coordinate of the block",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockState"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/chunk/{world}": {
      "get": {
        "tags": ["Chunk"],
        "summary": "List chunks",
        "description": "Gets a list of all the loaded chunks for the specified world.  \n\n **Required permissions:**  \n\n- **chunk.chunk.list**  \n",
        "operationId": "listChunks",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the for which to get all chunks",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chunk"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/chunk/{world}/{x}/{z}": {
      "get": {
        "tags": ["Chunk"],
        "summary": "Get a chunk",
        "description": "Get detailed information about a chunk  \n\n **Required permissions:**  \n\n- **chunk.chunk.one **  \n",
        "operationId": "getChunkAt",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world in which to get the chunk",
          "required": true,
          "type": "string"
        }, {
          "name": "x",
          "in": "path",
          "description": "The x-coordinate of the chunk (in chunk coordinates)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "z",
          "in": "path",
          "description": "The z-coordinate of the chunk (in chunk coordinates)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Chunk"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Chunk"],
        "summary": "Load & Generate a chunk",
        "description": "Forces a chunk to be loaded into memory, and created if it does not exist.  \n\n **Required permissions:**  \n\n- **chunk.chunk.create**  \n",
        "operationId": "createChunkAt",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world in which to create the chunk",
          "required": true,
          "type": "string"
        }, {
          "name": "x",
          "in": "path",
          "description": "The x-coordinate of the chunk (in chunk coordinates)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "z",
          "in": "path",
          "description": "The z-coordinate of the chunk (in chunk coordinates)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Chunk"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/cmd": {
      "get": {
        "tags": ["Command"],
        "summary": "List commands",
        "description": "Gets a list of all the commands available on the server.  \n\n **Required permissions:**  \n\n- **cmd.list**  \n",
        "operationId": "listCommands",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Command"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Command"],
        "summary": "Execute a command",
        "description": "Execute a command on the server. (Almost the same as running it from the console).  \nPass an array of commands to execute them in succession, you can also just pass a list with only one command if that's all you want to execute.\n\nReturns a list with each response corresponding to a command.  \n\n **Required permissions:**  \n\n- **cmd.run**  \n- **cmd.run.[command]**  \n",
        "operationId": "runCommands",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExecuteCommandRequest"
            }
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/cmd/{cmd}": {
      "get": {
        "tags": ["Command"],
        "summary": "Get a command",
        "description": "Get detailed information about a command.  \n\n **Required permissions:**  \n\n- **cmd.one**  \n",
        "operationId": "getCommand",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "cmd",
          "in": "path",
          "description": "The id of the command",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Command"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/economy/account/{id}": {
      "get": {
        "tags": ["Economy"],
        "summary": "List currencies",
        "description": "Lists all the currencies that the current economy supports.  \n\n **Required permissions:**  \n\n- **economy.account.one**  \n",
        "operationId": "getAccount",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/economy/currency": {
      "get": {
        "tags": ["Economy"],
        "summary": "List currencies",
        "description": "Lists all the currencies that the current economy supports.  \n\n **Required permissions:**  \n\n- **economy.currency.list**  \n",
        "operationId": "getCurrencies",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Currency"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/entity": {
      "get": {
        "tags": ["Entity"],
        "summary": "List entities",
        "description": "Get a list of all entities on the server (in all worlds).  \n\n **Required permissions:**  \n\n- **entity.list**  \n",
        "operationId": "listEntities",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "query",
          "description": "The world to filter the entities by",
          "required": false,
          "type": "string"
        }, {
          "name": "type",
          "in": "query",
          "description": "The type id of the entities to filter by",
          "required": false,
          "type": "string"
        }, {
          "name": "min",
          "in": "query",
          "description": "The minimum coordinates at which the entity must be, min=x|y|z",
          "required": false,
          "type": "string"
        }, {
          "name": "max",
          "in": "query",
          "description": "The maximum coordinates at which the entity must be, max=x|y|z",
          "required": false,
          "type": "string"
        }, {
          "name": "limit",
          "in": "query",
          "description": "The maximum amount of entities returned",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Entity"],
        "summary": "Spawn an entity",
        "description": "Creates & Spawns a new entity with the specified properties.  \n\n **Required permissions:**  \n\n- **entity.create**  \n",
        "operationId": "createEntity",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/CreateEntityRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/entity/{entity}": {
      "get": {
        "tags": ["Entity"],
        "summary": "Get entity",
        "description": "Get detailed information about an entity.  \n\n **Required permissions:**  \n\n- **entity.one**  \n",
        "operationId": "getEntity",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "entity",
          "in": "path",
          "description": "The uuid of the entity",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Entity"],
        "summary": "Modify an entity",
        "description": "Modify the properties of an existing entity.  \n\n **Required permissions:**  \n\n- **entity.modify**  \n",
        "operationId": "modifyEntity",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "entity",
          "in": "path",
          "description": "The uuid of the entity",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/UpdateEntityRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Entity"],
        "summary": "Destroy an entity",
        "description": "Destroys an entity.  \n\n **Required permissions:**  \n\n- **entity.delete**  \n",
        "operationId": "removeEntity",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "entity",
          "in": "path",
          "description": "The uuid of the entity",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/entity/{entity}/method": {
      "post": {
        "tags": ["Entity"],
        "summary": "Execute a method",
        "description": "Provides direct access to the underlaying entity object and can execute any method on it.  \n\n **Required permissions:**  \n\n- **entity.method**  \n",
        "operationId": "executeMethod",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "entity",
          "in": "path",
          "description": "The uuid of the entity",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ExecuteMethodRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExecuteMethodResponse"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/history/cmd": {
      "get": {
        "tags": ["History"],
        "summary": "Get command history",
        "description": "View a history of the server commands.  \n\n **Required permissions:**  \n\n- **history.cmd**  \n",
        "operationId": "getCommands",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommandCall"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/history/message": {
      "get": {
        "tags": ["History"],
        "summary": "Get message history",
        "description": "View a history of the server messages.  \n\n **Required permissions:**  \n\n- **history.message**  \n",
        "operationId": "getChat",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/husky-crates/crate": {
      "get": {
        "tags": ["Husky Crates"],
        "summary": "List crates",
        "description": "Get a list of all the crates on the server.  \n\n **Required permissions:**  \n\n- **husky-crates.crate.list**  \n",
        "operationId": "listCrates",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HuskyCratesCrate"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Husky Crates"],
        "summary": "Create a crate",
        "description": "Creates a new crate.  \n\n **Required permissions:**  \n\n- **husky-crates.crate.create **  \n",
        "operationId": "createCrate",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/HuskyCratesCrate"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HuskyCratesCrate"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/husky-crates/crate/{id}": {
      "get": {
        "tags": ["Husky Crates"],
        "summary": "Get a crate",
        "description": "Get detailed information about a crate.  \n\n **Required permissions:**  \n\n- **husky-crates.crate.one**  \n",
        "operationId": "getCrate",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HuskyCratesCrate"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Husky Crates"],
        "summary": "Change a crate",
        "description": "Modify a crate.  \n\n **Required permissions:**  \n\n- **husky-crates.crate.modify**  \n",
        "operationId": "modifyCrate",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/HuskyCratesCrate"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HuskyCratesCrate"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Husky Crates"],
        "summary": "Delete a crate",
        "description": "Delete a crate.  \n\n **Required permissions:**  \n\n- **husky-crates.crate.delete**  \n",
        "operationId": "deleteCrate",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HuskyCratesCrate"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/info": {
      "get": {
        "tags": ["Info"],
        "summary": "Server info",
        "description": "Get general information about the Minecraft server.  \n\n **Required permissions:**  \n\n- **info.info**  \n",
        "operationId": "getInfo",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerInfo"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/info/servlets": {
      "get": {
        "tags": ["Info"],
        "summary": "List servlets",
        "description": "Lists all the active servlets running in the Web-API  \n\n **Required permissions:**  \n\n- **info.servlets**  \n",
        "operationId": "listServlets",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/info/stats": {
      "get": {
        "tags": ["Info"],
        "summary": "Server stats",
        "description": "Get statistical information about the server, such as player count, cpu and memory usage over time.  \n\n **Required permissions:**  \n\n- **info.stats**  \n",
        "operationId": "getStats",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "limit",
          "in": "query",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerStats"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/interactive-message": {
      "get": {
        "tags": ["Interactive Message"],
        "summary": "List messages",
        "description": "Get a list of all the messages that were sent through the message endpoint since the server started.  \n\n **Required permissions:**  \n\n- **interactive-message.list**  \n",
        "operationId": "listMessages",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InteractiveMessage"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Interactive Message"],
        "summary": "Send a message",
        "description": "Send an interactive message to a player. Make sure to have an event hook for \"custom_message\" to receive the response.  \n\n **Required permissions:**  \n\n- **interactive-message.create**  \n",
        "operationId": "sendMessage",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InteractiveMessage"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InteractiveMessage"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/interactive-message/{uuid}": {
      "get": {
        "tags": ["Interactive Message"],
        "summary": "Get a message",
        "description": "Get detailed information about a message.  \n\n **Required permissions:**  \n\n- **interactive-message.one**  \n",
        "operationId": "getMessage",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "description": "The uuid of the sent message",
          "required": true,
          "type": "string",
          "format": "uuid"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InteractiveMessage"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/map/{world}/{x}/{z}": {
      "get": {
        "tags": ["Map"],
        "summary": "Get a map tile",
        "description": "Returns an image representing the biomes of the blocks within the specified tile  \n\n **Required permissions:**  \n\n- **map.map**  \n",
        "operationId": "getMap",
        "consumes": ["application/json", "application/xml"],
        "produces": ["image/png"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The world to get the map tile from",
          "required": true,
          "type": "string"
        }, {
          "name": "x",
          "in": "path",
          "description": "The x-coordinate of the tile (is multiplied by the TILE_SIZE)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "z",
          "in": "path",
          "description": "The z-coordinate of the tile (is multiplied by the TILE_SIZE)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/mmc-restrict/item": {
      "get": {
        "tags": ["MMC Restrict"],
        "summary": "List items",
        "description": "Gets the list of restricted items on the server.  \n\n **Required permissions:**  \n\n- **mmc-restrict.item.list**  \n",
        "operationId": "listItems",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MMCRestrictItem"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["MMC Restrict"],
        "summary": "Add an item",
        "description": "Adds a new item to the restricted item list.  \n\n **Required permissions:**  \n\n- **mmc-restrict.item.create**  \n",
        "operationId": "addItem",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/MMCRestrictItem"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MMCRestrictItem"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/mmc-restrict/item/{id}": {
      "put": {
        "tags": ["MMC Restrict"],
        "summary": "Modify an item",
        "description": "Modify an existing restricted item.  \n\n **Required permissions:**  \n\n- **mmc-restrict.item.modify**  \n",
        "operationId": "modifyItem",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/MMCRestrictItem"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MMCRestrictItem"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["MMC Restrict"],
        "summary": "Delete an item",
        "description": "Delete an existing restricted item.  \n\n **Required permissions:**  \n\n- **mmc-restrict.item.delete**  \n",
        "operationId": "deleteItem",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MMCRestrictItem"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/mmc-tickets/ticket": {
      "get": {
        "tags": ["MMC Tickets"],
        "summary": "List tickets",
        "description": "Get a list of all the tickets on the server.  \n\n **Required permissions:**  \n\n- **mmc-tickets.ticket.list**  \n",
        "operationId": "listTickets",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MMCTicketsTicket"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/mmc-tickets/ticket/{id}": {
      "get": {
        "tags": ["MMC Tickets"],
        "summary": "Get a ticket",
        "description": "Get detailed information about a ticket.  \n\n **Required permissions:**  \n\n- **mmc-tickets.ticket.one**  \n",
        "operationId": "getTicket",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MMCTicketsTicket"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["MMC Tickets"],
        "summary": "Modify a ticket",
        "description": "Modify the properties of an existing ticket.  \n\n **Required permissions:**  \n\n- **mmc-tickets.ticket.modify**  \n",
        "operationId": "modifyTicket",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/MMCTicketsTicket"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MMCTicketsTicket"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/home/{player}": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "List homes",
        "description": "Get a list of all the homes of a player.  \n\n **Required permissions:**  \n\n- **nucleus.home.list**  \n",
        "operationId": "listHomes",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "player",
          "in": "path",
          "description": "The uuid of the player",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NucleusNamedLocation"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/jail": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "List jails",
        "description": "Get a list of all the jails on the server.  \n\n **Required permissions:**  \n\n- **nucleus.jail.list**  \n",
        "operationId": "listJails",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NucleusNamedLocation"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Nucleus"],
        "summary": "Create a jail",
        "description": "Creates a new jail.  \n\n **Required permissions:**  \n\n- **nucleus.jail.create**  \n",
        "operationId": "createJail",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/NucleusNamedLocation"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusNamedLocation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/jail/{name}": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "Get a jail",
        "description": "Get detailed information about a jail.  \n\n **Required permissions:**  \n\n- **nucleus.jail.one**  \n",
        "operationId": "getJail",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusNamedLocation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Nucleus"],
        "summary": "Modify a jail",
        "description": "Modify an existing jail.  \n\n **Required permissions:**  \n\n- **nucleus.jail.modify**  \n",
        "operationId": "modifyJail",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusNamedLocation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "501": {
            "$ref": "#/responses/501"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Nucleus"],
        "summary": "Delete a jail",
        "description": "Delete an existing jail.  \n\n **Required permissions:**  \n\n- **nucleus.jail.delete**  \n",
        "operationId": "deleteJail",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusNamedLocation"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/kit": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "List kits",
        "description": "Get a list of all the kits on the server.  \n\n **Required permissions:**  \n\n- **nucleus.kit.list**  \n",
        "operationId": "listKits",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NucleusKit"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Nucleus"],
        "summary": "Create a kit",
        "description": "Creates a new kit.  \n\n **Required permissions:**  \n\n- **nucleus.kit.create**  \n",
        "operationId": "createKit",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/NucleusKit"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusKit"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/kit/{name}": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "Get a kit",
        "description": "Get detailed information about a kit.  \n\n **Required permissions:**  \n\n- **nucleus.kit.one**  \n",
        "operationId": "getKit",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusKit"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Nucleus"],
        "summary": "Modify a kit",
        "description": "Modify an existing kit.  \n\n **Required permissions:**  \n\n- **nucleus.kit.modify**  \n",
        "operationId": "modifyKit",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/NucleusKit"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusKit"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Nucleus"],
        "summary": "Delete a kit",
        "description": "Delete an existing kit.  \n\n **Required permissions:**  \n\n- **nucleus.kit.delete**  \n",
        "operationId": "deleteKit",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NucleusKit"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/mail/{player}": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "List mail",
        "description": "Get a list of all mail messages of a player.  \n\n **Required permissions:**  \n\n- **nucleus.mail.list**  \n",
        "operationId": "listMail",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "player",
          "in": "path",
          "description": "The uuid of the player",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NucleusMailMessage"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/nucleus/module": {
      "get": {
        "tags": ["Nucleus"],
        "summary": "List modules",
        "description": "Get a list of loaded Nucleus modules.  \n\n **Required permissions:**  \n\n- **nucleus.module.list**  \n",
        "operationId": "listMail",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/permission/collection": {
      "get": {
        "tags": ["Permission"],
        "summary": "List collections",
        "description": "Gets a list of all the subject collections, for example groups, users, etc.  \n\n **Required permissions:**  \n\n- **permission.collection.list**  \n",
        "operationId": "listCollections",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/SubjectCollection"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/permission/collection/{id}": {
      "get": {
        "tags": ["Permission"],
        "summary": "Get collection",
        "description": "Gets a specific subject collection  \n\n **Required permissions:**  \n\n- **permission.collection.one**  \n",
        "operationId": "getCollection",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubjectCollection"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/permission/collection/{id}/subject": {
      "get": {
        "tags": ["Permission"],
        "summary": "List subjects",
        "description": "List all subjects belonging to a certain collection  \n\n **Required permissions:**  \n\n- **permission.collection.subject.list**  \n",
        "operationId": "listSubjects",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Subject"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/permission/collection/{id}/subject/{subId}": {
      "get": {
        "tags": ["Permission"],
        "summary": "Get subject",
        "description": "Gets one specific subject belonging to a certain collection  \n\n **Required permissions:**  \n\n- **permission.collection.subject.list**  \n",
        "operationId": "getSubject",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "name": "subId",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subject"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/player": {
      "get": {
        "tags": ["Player"],
        "summary": "List players",
        "description": "Get a list of all the players on the server.  \n\n **Required permissions:**  \n\n- **player.list**  \n",
        "operationId": "listPlayers",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerFull"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/player/{player}": {
      "get": {
        "tags": ["Player"],
        "summary": "Get a player",
        "description": "Get detailed information about a player.  \n\n **Required permissions:**  \n\n- **player.one**  \n",
        "operationId": "getPlayer",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "player",
          "in": "path",
          "description": "The uuid of the player",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerFull"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Player"],
        "summary": "Modify a player",
        "description": "Modify the properties of an existing player.  \n\n **Required permissions:**  \n\n- **player.modify**  \n",
        "operationId": "modifyPlayer",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "player",
          "in": "path",
          "description": "The uuid of the player",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/UpdatePlayerRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerFull"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/player/{player}/method": {
      "post": {
        "tags": ["Player"],
        "summary": "Execute a method",
        "description": "Provides direct access to the underlying player object and can execute any method on it.  \n\n **Required permissions:**  \n\n- **player.method**  \n",
        "operationId": "executeMethod",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "player",
          "in": "path",
          "description": "The uuid of the player",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ExecuteMethodRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExecuteMethodResponse"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/plugin": {
      "get": {
        "tags": ["Plugin"],
        "summary": "List plugins",
        "description": "Get a list of all the plugins running on the server.  \n\n **Required permissions:**  \n\n- **plugin.list**  \n",
        "operationId": "listPlugins",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PluginContainer"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/plugin/{plugin}": {
      "get": {
        "tags": ["Plugin"],
        "summary": "Get a plugin",
        "description": "Gets detailed information about a plugin.  \n\n **Required permissions:**  \n\n- **plugin.one**  \n",
        "operationId": "getPlugin",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "plugin",
          "in": "path",
          "description": "The id of the plugin",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PluginContainer"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/plugin/{plugin}/config": {
      "get": {
        "tags": ["Plugin"],
        "summary": "Get plugin configs",
        "description": "Gets a map containing the plugin config file names as keys, and their config file contents as their values.  \n\n **Required permissions:**  \n\n- **plugin.config.get**  \n",
        "operationId": "getPluginConfig",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "plugin",
          "in": "path",
          "description": "The id of the plugin",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Plugin"],
        "summary": "Change plugin configs",
        "description": "Allows changing the config files of plugin. Send a map from config filename to file contents. **This does not reload the plugin**, you can do that with `sponge plugins reload`, but not all plugins implement the reload event.  \n\n **Required permissions:**  \n\n- **plugin.config.modify**  \n- **plugin.config.modify.[plugin]**  \n",
        "operationId": "changePluginConfig",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "plugin",
          "in": "path",
          "description": "The id of the plugin",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/recipe": {
      "get": {
        "tags": ["Recipe"],
        "summary": "List recipes",
        "description": "  \n\n **Required permissions:**  \n\n- **recipe.list**  \n",
        "operationId": "listRecipes",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/red-protect/region": {
      "get": {
        "tags": ["Red Protect"],
        "summary": "List regions",
        "description": "Lists all the regions being protected  \n\n **Required permissions:**  \n\n- **red-protect.region.list**  \n",
        "operationId": "listRegions",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "query",
          "required": false,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RedProtectRegion"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Red Protect"],
        "summary": "Create a region",
        "description": "Create a new region at a specified location  \n\n **Required permissions:**  \n\n- **red-protect.region.create**  \n",
        "operationId": "createRegion",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/RedProtectRegion"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedProtectRegion"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/red-protect/region/{id}": {
      "get": {
        "tags": ["Red Protect"],
        "summary": "Get a region",
        "description": "Get details for a specific protected region  \n\n **Required permissions:**  \n\n- **red-protect.region.one**  \n",
        "operationId": "getRegion",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedProtectRegion"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Red Protect"],
        "summary": "Modify a region",
        "description": "Update the details for a specific protected region  \n\n **Required permissions:**  \n\n- **red-protect.region.modify**  \n",
        "operationId": "modifyRegion",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/RedProtectRegion"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedProtectRegion"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Red Protect"],
        "summary": "Delete a region",
        "description": "Remove the specified protected region  \n\n **Required permissions:**  \n\n- **red-protect.region.delete**  \n",
        "operationId": "deleteRegion",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedProtectRegion"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/registry/{class}": {
      "get": {
        "tags": ["Registry"],
        "summary": "Get a catalog type",
        "description": "Lists all the catalog values of a specified CatalogType.  \n\n **Required permissions:**  \n\n- **registry.one**  \n",
        "operationId": "getRegistry",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "class",
          "in": "path",
          "description": "The fully qualified classname of the catalog type",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CatalogType"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/server/properties": {
      "get": {
        "tags": ["Server"],
        "summary": "List server properties",
        "description": "Get the main server properties (server.properties file).  \n\n **Required permissions:**  \n\n- **server.properties.list**  \n",
        "operationId": "listProperties",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerProperty"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Server"],
        "summary": "Modify server properties",
        "description": "Modify settings in the server.properties file. **Note that these settings don't take effect until you restart the server.  \n\n **Required permissions:**  \n\n- **server.properties.modify**  \n- **server.properties.modify.[property]**  \n",
        "operationId": "modifyProperties",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerProperty"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/tile-entity": {
      "get": {
        "tags": ["Tile Entity"],
        "summary": "List tile entities",
        "description": "Get a list of all tile entities on the server (in all worlds, unless specified).  \n\n **Required permissions:**  \n\n- **tile-entity.list**  \n",
        "operationId": "listTileEntities",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "query",
          "description": "The world to filter tile entities by",
          "required": false,
          "type": "string"
        }, {
          "name": "type",
          "in": "query",
          "description": "The type if of tile entities to filter by",
          "required": false,
          "type": "string"
        }, {
          "name": "min",
          "in": "query",
          "description": "The minimum coordinates at which the tile entity must be, min=x|y|z",
          "required": false,
          "type": "string"
        }, {
          "name": "max",
          "in": "query",
          "description": "The maximum coordinates at which the tile entity must be, max=x|y|z",
          "required": false,
          "type": "string"
        }, {
          "name": "limit",
          "in": "query",
          "description": "The maximum amount of tile entities returned",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TileEntity"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/tile-entity/{world}/{x}/{y}/{z}": {
      "get": {
        "tags": ["Tile Entity"],
        "summary": "Get tile entity",
        "description": "Get detailed information about a tile entity.  \n\n **Required permissions:**  \n\n- **tile-entity.one**  \n",
        "operationId": "getTileEntity",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The world the tile entity is in",
          "required": true,
          "type": "string"
        }, {
          "name": "x",
          "in": "path",
          "description": "The x-coordinate of the tile-entity",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "y",
          "in": "path",
          "description": "The y-coordinate of the tile-entity",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "z",
          "in": "path",
          "description": "The z-coordinate of the tile-entity",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TileEntity"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/tile-entity/{world}/{x}/{y}/{z}/method": {
      "post": {
        "tags": ["Tile Entity"],
        "summary": "Execute a method",
        "description": "Provides direct access to the underlaying tile entity object and can execute any method on it.  \n\n **Required permissions:**  \n\n- **tile-entity.method**  \n",
        "operationId": "executeMethod",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The world the tile entity is in",
          "required": true,
          "type": "string"
        }, {
          "name": "x",
          "in": "path",
          "description": "The x-coordinate of the tile-entity",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "y",
          "in": "path",
          "description": "The x-coordinate of the tile-entity",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "z",
          "in": "path",
          "description": "The x-coordinate of the tile-entity",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ExecuteMethodRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExecuteMethodResponse"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/universal-market/item": {
      "get": {
        "tags": ["Universal Market"],
        "summary": "List items",
        "description": "Lists all the items in the market currently available for sale  \n\n **Required permissions:**  \n\n- **universal-market.item.list**  \n",
        "operationId": "listMarketItems",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UniversalMarketItem"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/user": {
      "get": {
        "tags": ["User"],
        "summary": "Check info",
        "description": "Checks to see if the passed api key is still valid and retrieves the user info and permissions associated with this key  \n\n **Required permissions:**  \n\n- **user.info**  \n",
        "operationId": "getUserDetails",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PermissionStruct"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["User"],
        "summary": "Login",
        "description": "Tries to acquire an api key with the passed credentials.",
        "operationId": "authUser",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/AuthenticationRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PermissionStruct"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/web-books/book": {
      "get": {
        "tags": ["Web Books"],
        "summary": "List books",
        "description": "Get a list of all the web books on the server.  \n\n **Required permissions:**  \n\n- **web-books.book.list**  \n",
        "operationId": "listWebBooks",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebBooksBook"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["Web Books"],
        "summary": "Create a book",
        "description": "Create a new web book from the specified data.  \n\n **Required permissions:**  \n\n- **web-books.book.create**  \n",
        "operationId": "createWebBook",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/WebBooksBook"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebBooksBook"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/web-books/book/{id}": {
      "get": {
        "tags": ["Web Books"],
        "summary": "Get a book",
        "description": "Get detailed information about a web book.  \n\n **Required permissions:**  \n\n- **web-books.book.one**  \n",
        "operationId": "getWebBook",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebBooksBook"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["Web Books"],
        "summary": "Modify a book",
        "description": "Modify an existing book.  \n\n **Required permissions:**  \n\n- **web-books.book.modify**  \n",
        "operationId": "modifyWebBook",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/WebBooksBook"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebBooksBook"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["Web Books"],
        "summary": "Delete a book",
        "description": "Delete a web book.  \n\n **Required permissions:**  \n\n- **web-books.book.delete**  \n",
        "operationId": "deleteWebBook",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebBooksBook"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/web-books/book/{id}/html": {
      "get": {
        "tags": ["Web Books"],
        "summary": "Book HTML",
        "description": "Get the web book content as HTML.",
        "operationId": "getWebBookContent",
        "consumes": ["application/x-www-form-urlencoded", "application/xml", "application/json"],
        "produces": ["text/html"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      },
      "post": {
        "tags": ["Web Books"],
        "summary": "Book HTML",
        "description": "Get the web book content as HTML.",
        "operationId": "getWebBookContentPost",
        "consumes": ["application/x-www-form-urlencoded", "application/xml", "application/json"],
        "produces": ["text/html"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },
    "/world": {
      "get": {
        "tags": ["World"],
        "summary": "List worlds",
        "description": "Get a list of all the worlds on the server.  \n\n **Required permissions:**  \n\n- **world.list**  \n",
        "operationId": "listWorlds",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorldFull"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "post": {
        "tags": ["World"],
        "summary": "Create a world",
        "description": "Creates a new world with the specified settings. This does not yet load the world.  \n\n **Required permissions:**  \n\n- **world.create**  \n",
        "operationId": "createWorld",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/CreateWorldRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorldFull"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/world/{world}": {
      "get": {
        "tags": ["World"],
        "summary": "Get a world",
        "description": "Get detailed information about a world.  \n\n **Required permissions:**  \n\n- **world.one**  \n",
        "operationId": "getWorld",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world for which to get details",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorldFull"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "put": {
        "tags": ["World"],
        "summary": "Modify a world",
        "description": "Modify the properties of an existing world.  \n\n **Required permissions:**  \n\n- **world.modify**  \n",
        "operationId": "modifyWorld",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world which to update",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/UpdateWorldRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorldFull"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      },
      "delete": {
        "tags": ["World"],
        "summary": "Delete a world",
        "description": "Deletes an existing world. **The world must be unloaded before deleting it**  \n\n **Required permissions:**  \n\n- **world.delete**  \n",
        "operationId": "deleteWorld",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world to delete",
          "required": true,
          "type": "string"
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorldFull"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    },
    "/world/{world}/method": {
      "post": {
        "tags": ["World"],
        "summary": "Execute a method",
        "description": "Provides direct access to the underlaying world object and can execute any method on it.  \n\n **Required permissions:**  \n\n- **world.method**  \n",
        "operationId": "executeMethod",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [{
          "name": "world",
          "in": "path",
          "description": "The uuid of the world on which to execute the method",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ExecuteMethodRequest"
          }
        }, {
          "$ref": "#/parameters/details"
        }, {
          "$ref": "#/parameters/accept"
        }, {
          "$ref": "#/parameters/pretty"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExecuteMethodResponse"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        },
        "security": [{
          "ApiKeyHeader": []
        }, {
          "ApiKeyQuery": []
        }]
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyHeader": {
      "description": "Authorize using an HTTP header. This can also be done using the `Authorization` header with a `Bearer` token",
      "type": "apiKey",
      "name": "X-WebAPI-Key",
      "in": "header"
    },
    "ApiKeyQuery": {
      "description": "Authorize using a query value.",
      "type": "apiKey",
      "name": "key",
      "in": "query"
    }
  },
  "definitions": {
    "LocalDate": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "The day of the month (1-31)"
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "The month in the year (1-12)"
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "The year"
        }
      }
    },
    "TimeHolder": {
      "type": "object",
      "properties": {
        "activeTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of active time spent"
        },
        "afkTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time spent afk (only works if Nucleus is present)"
        }
      }
    },
    "UserReport": {
      "type": "object",
      "properties": {
        "dailyAverage": {
          "$ref": "#/definitions/TimeHolder"
        },
        "from": {
          "$ref": "#/definitions/LocalDate"
        },
        "monthlyAverage": {
          "$ref": "#/definitions/TimeHolder"
        },
        "name": {
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/LocalDate"
        },
        "total": {
          "$ref": "#/definitions/TimeHolder"
        },
        "uuid": {
          "type": "string",
          "format": "uuid"
        },
        "weeklyAverage": {
          "$ref": "#/definitions/TimeHolder"
        }
      }
    },
    "ServerReport": {
      "type": "object",
      "properties": {
        "dailyAverage": {
          "$ref": "#/definitions/TimeHolder"
        },
        "from": {
          "$ref": "#/definitions/LocalDate"
        },
        "monthlyAverage": {
          "$ref": "#/definitions/TimeHolder"
        },
        "to": {
          "$ref": "#/definitions/LocalDate"
        },
        "total": {
          "$ref": "#/definitions/TimeHolder"
        },
        "weeklyAverage": {
          "$ref": "#/definitions/TimeHolder"
        }
      }
    },
    "CatalogType": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "HuskyCratesCommandReward": {
      "allOf": [{
        "$ref": "#/definitions/HuskyCratesCrateRewardObject"
      }, {
        "type": "object",
        "required": ["command"],
        "properties": {
          "command": {
            "type": "string",
            "description": "The command executed for the player"
          }
        }
      }]
    },
    "HuskyCratesCrate": {
      "type": "object",
      "required": ["free", "freeDelay", "id", "link", "name", "rewards", "scrambleRewards", "type"],
      "properties": {
        "free": {
          "type": "boolean",
          "description": "True if this crate is free to open, false otherwise"
        },
        "freeDelay": {
          "type": "integer",
          "format": "int32",
          "description": "In case this crate is free, this interval specifies the time (in seconds) after which this crate can be opened again"
        },
        "id": {
          "type": "string",
          "description": "The unique id of this crate"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the crate"
        },
        "rewards": {
          "type": "array",
          "description": "The possible rewards awarded for opening this crate",
          "items": {
            "$ref": "#/definitions/HuskyCratesCrateReward"
          }
        },
        "scrambleRewards": {
          "type": "boolean",
          "description": "True if the rewards are scrambled, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of crate",
          "enum": ["Spinner", "Roulette", "Instant", "Simple"]
        }
      }
    },
    "HuskyCratesCrateReward": {
      "type": "object",
      "required": ["announce", "chance", "displayItem", "name", "objects"],
      "properties": {
        "announce": {
          "type": "boolean",
          "description": "True if this reward is announced in chat, false otherwise"
        },
        "chance": {
          "type": "number",
          "format": "double",
          "description": "The chance to aquire this reward. This is relative to the chances of the other rewards in this crate"
        },
        "displayItem": {
          "description": "The ItemStack that is shown in the UI",
          "$ref": "#/definitions/ItemStack"
        },
        "name": {
          "type": "string",
          "description": "The name of this reward"
        },
        "objects": {
          "type": "array",
          "description": "The objects that are rewarded as part of this reward (can be commands and/or items)",
          "items": {
            "$ref": "#/definitions/HuskyCratesCrateRewardObject"
          }
        }
      }
    },
    "HuskyCratesCrateRewardObject": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of reward object",
          "readOnly": true,
          "enum": ["ITEM", "COMMAND"]
        }
      }
    },
    "HuskyCratesItemReward": {
      "allOf": [{
        "$ref": "#/definitions/HuskyCratesCrateRewardObject"
      }, {
        "type": "object",
        "required": ["item"],
        "properties": {
          "item": {
            "description": "The item that is awarded to the player",
            "$ref": "#/definitions/ItemStack"
          }
        }
      }]
    },
    "ItemStack": {
      "type": "object",
      "required": ["quantity", "type"],
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The quantity of items in this stack"
        },
        "type": {
          "description": "The type of this item",
          "$ref": "#/definitions/CatalogType"
        },
        "absorption": {
          "type": "number",
          "format": "double"
        },
        "age": {
          "$ref": "#/definitions/AgeableData"
        },
        "aggressive": {
          "type": "boolean"
        },
        "aiEnabled": {
          "type": "boolean"
        },
        "angerLevel": {
          "type": "integer",
          "format": "int32"
        },
        "armorStand": {
          "$ref": "#/definitions/ArmorStandData"
        },
        "art": {
          "$ref": "#/definitions/CatalogType"
        },
        "attached": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "axis": {
          "type": "string",
          "enum": ["X", "Y", "Z"]
        },
        "banner": {
          "$ref": "#/definitions/BannerData"
        },
        "beacon": {
          "$ref": "#/definitions/BeaconData"
        },
        "bigMushroom": {
          "$ref": "#/definitions/CatalogType"
        },
        "block": {
          "$ref": "#/definitions/BlockState"
        },
        "breathing": {
          "$ref": "#/definitions/BreathingData"
        },
        "breedable": {
          "type": "boolean"
        },
        "brewingStand": {
          "$ref": "#/definitions/BrewingStandData"
        },
        "brick": {
          "$ref": "#/definitions/CatalogType"
        },
        "career": {
          "$ref": "#/definitions/Career"
        },
        "charged": {
          "type": "boolean"
        },
        "coal": {
          "$ref": "#/definitions/CatalogType"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "command": {
          "$ref": "#/definitions/CommandData"
        },
        "comparator": {
          "$ref": "#/definitions/CatalogType"
        },
        "connectedDirection": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
          }
        },
        "cookedFish": {
          "$ref": "#/definitions/CatalogType"
        },
        "cooldown": {
          "type": "integer",
          "format": "int32"
        },
        "criticalHit": {
          "type": "boolean"
        },
        "customName": {
          "type": "boolean"
        },
        "damage": {
          "type": "number",
          "format": "double"
        },
        "damageable": {
          "$ref": "#/definitions/DamageableData"
        },
        "decayable": {
          "type": "boolean"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "despawnDelay": {
          "$ref": "#/definitions/DespawnDelayData"
        },
        "direction": {
          "type": "string",
          "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
        },
        "dirt": {
          "$ref": "#/definitions/CatalogType"
        },
        "disarmed": {
          "type": "boolean"
        },
        "disguisedBlock": {
          "$ref": "#/definitions/CatalogType"
        },
        "displayName": {
          "type": "string"
        },
        "dominantHand": {
          "$ref": "#/definitions/CatalogType"
        },
        "doublePlant": {
          "$ref": "#/definitions/CatalogType"
        },
        "drops": {
          "type": "boolean"
        },
        "durability": {
          "$ref": "#/definitions/DurabilityData"
        },
        "dye": {
          "$ref": "#/definitions/DyeColor"
        },
        "enchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "endGateway": {
          "$ref": "#/definitions/EndGatewayData"
        },
        "expOrb": {
          "type": "integer",
          "format": "int32"
        },
        "experience": {
          "$ref": "#/definitions/ExperienceHolderData"
        },
        "expireTicks": {
          "type": "integer",
          "format": "int32"
        },
        "explosionRadius": {
          "type": "integer",
          "format": "int32"
        },
        "extended": {
          "type": "boolean"
        },
        "fallDistance": {
          "type": "number",
          "format": "float"
        },
        "fallingBlock": {
          "$ref": "#/definitions/FallingBlockData"
        },
        "filled": {
          "type": "boolean"
        },
        "fireworkEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FireworkEffect"
          }
        },
        "fireworkRocket": {
          "$ref": "#/definitions/FireworkRocketData"
        },
        "fish": {
          "$ref": "#/definitions/CatalogType"
        },
        "flammable": {
          "type": "boolean"
        },
        "fluid": {
          "$ref": "#/definitions/FluidStack"
        },
        "fluidLevel": {
          "type": "integer",
          "format": "int32"
        },
        "fluidTanks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FluidStack"
            }
          }
        },
        "flying": {
          "type": "boolean"
        },
        "flyingAbility": {
          "type": "boolean"
        },
        "food": {
          "$ref": "#/definitions/FoodData"
        },
        "furnace": {
          "$ref": "#/definitions/FurnaceData"
        },
        "fuse": {
          "$ref": "#/definitions/FuseData"
        },
        "gameMode": {
          "$ref": "#/definitions/GameMode"
        },
        "generation": {
          "type": "integer",
          "format": "int32"
        },
        "glowing": {
          "type": "boolean"
        },
        "goldenApple": {
          "$ref": "#/definitions/CatalogType"
        },
        "griefs": {
          "type": "boolean"
        },
        "growth": {
          "$ref": "#/definitions/GrowthData"
        },
        "health": {
          "$ref": "#/definitions/HealthData"
        },
        "hide": {
          "$ref": "#/definitions/HideData"
        },
        "hinge": {
          "$ref": "#/definitions/CatalogType"
        },
        "horse": {
          "$ref": "#/definitions/HorseData"
        },
        "igniteable": {
          "$ref": "#/definitions/IgniteableData"
        },
        "inWall": {
          "type": "boolean"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "invisibility": {
          "$ref": "#/definitions/InvisibilityData"
        },
        "invulnerability": {
          "$ref": "#/definitions/InvulnerabilityData"
        },
        "joined": {
          "$ref": "#/definitions/JoinData"
        },
        "knockback": {
          "type": "integer",
          "format": "int32"
        },
        "layer": {
          "type": "integer",
          "format": "int32"
        },
        "leash": {
          "$ref": "#/definitions/LeashData"
        },
        "lockToken": {
          "type": "string"
        },
        "logAxis": {
          "$ref": "#/definitions/CatalogType"
        },
        "lore": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minecartBlock": {
          "$ref": "#/definitions/MinecartBlockData"
        },
        "mobSpawner": {
          "$ref": "#/definitions/MobSpawnerData"
        },
        "moisture": {
          "type": "integer",
          "format": "int32"
        },
        "note": {
          "$ref": "#/definitions/CatalogType"
        },
        "occupied": {
          "type": "boolean"
        },
        "ocelot": {
          "$ref": "#/definitions/CatalogType"
        },
        "open": {
          "type": "boolean"
        },
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passengers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "persists": {
          "type": "boolean"
        },
        "pickupDelay": {
          "$ref": "#/definitions/PickupDelayData"
        },
        "pickupRule": {
          "$ref": "#/definitions/CatalogType"
        },
        "pigSaddle": {
          "type": "boolean"
        },
        "piston": {
          "$ref": "#/definitions/CatalogType"
        },
        "placeableOn": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CatalogType"
          }
        },
        "plant": {
          "$ref": "#/definitions/CatalogType"
        },
        "playerCreated": {
          "type": "boolean"
        },
        "playing": {
          "type": "boolean"
        },
        "portion": {
          "$ref": "#/definitions/CatalogType"
        },
        "potionEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "powered": {
          "type": "boolean"
        },
        "prismarine": {
          "$ref": "#/definitions/CatalogType"
        },
        "quartz": {
          "$ref": "#/definitions/CatalogType"
        },
        "rabbit": {
          "$ref": "#/definitions/CatalogType"
        },
        "railDirection": {
          "$ref": "#/definitions/CatalogType"
        },
        "redstonePower": {
          "type": "integer",
          "format": "int32"
        },
        "representedItem": {
          "$ref": "#/definitions/ItemStack"
        },
        "representedPlayer": {
          "type": "string"
        },
        "respawnLocations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Location"
          }
        },
        "sand": {
          "$ref": "#/definitions/CatalogType"
        },
        "sandStone": {
          "$ref": "#/definitions/CatalogType"
        },
        "screaming": {
          "type": "boolean"
        },
        "seamless": {
          "type": "boolean"
        },
        "shatters": {
          "type": "boolean"
        },
        "sheared": {
          "type": "boolean"
        },
        "shrub": {
          "$ref": "#/definitions/CatalogType"
        },
        "sign": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silent": {
          "type": "boolean"
        },
        "sitting": {
          "type": "boolean"
        },
        "skin": {
          "type": "string",
          "format": "uuid"
        },
        "skull": {
          "$ref": "#/definitions/CatalogType"
        },
        "slab": {
          "$ref": "#/definitions/CatalogType"
        },
        "sleeping": {
          "type": "boolean"
        },
        "slime": {
          "$ref": "#/definitions/SlimeData"
        },
        "sneaking": {
          "type": "boolean"
        },
        "snow": {
          "type": "boolean"
        },
        "spawn": {
          "$ref": "#/definitions/CatalogType"
        },
        "sprinting": {
          "type": "boolean"
        },
        "stairShape": {
          "$ref": "#/definitions/CatalogType"
        },
        "statistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stat"
          }
        },
        "stone": {
          "$ref": "#/definitions/CatalogType"
        },
        "storedEnchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "structure": {
          "$ref": "#/definitions/StructureData"
        },
        "stuckArrows": {
          "type": "integer",
          "format": "int32"
        },
        "tamed": {
          "$ref": "#/definitions/TameableData"
        },
        "target": {
          "$ref": "#/definitions/Vector3d"
        },
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TradeOffer"
          }
        },
        "tree": {
          "$ref": "#/definitions/CatalogType"
        },
        "vehicle": {
          "$ref": "#/definitions/VehicleData"
        },
        "wall": {
          "$ref": "#/definitions/CatalogType"
        },
        "wet": {
          "type": "boolean"
        },
        "wires": {
          "$ref": "#/definitions/WireAttachmentData"
        },
        "acceptsItems": {
          "$ref": "#/definitions/AcceptsItems"
        },
        "applicableEffect": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "armorSlotType": {
          "$ref": "#/definitions/ArmorSlotType"
        },
        "armorType": {
          "$ref": "#/definitions/CatalogType"
        },
        "blastResistance": {
          "type": "number",
          "format": "double"
        },
        "burningFuel": {
          "type": "integer",
          "format": "int32"
        },
        "damageAbsorption": {
          "type": "integer",
          "format": "int32"
        },
        "efficiency": {
          "type": "number",
          "format": "double"
        },
        "equipmentType": {
          "$ref": "#/definitions/CatalogType"
        },
        "equiptmentSlotType": {
          "$ref": "#/definitions/EquipmentSlotType"
        },
        "eyeHeight": {
          "type": "number",
          "format": "double"
        },
        "eyeLocation": {
          "$ref": "#/definitions/Vector3d"
        },
        "fluidTemperature": {
          "type": "integer",
          "format": "int32"
        },
        "fluidViscosity": {
          "type": "integer",
          "format": "int32"
        },
        "foodRestoration": {
          "type": "integer",
          "format": "int32"
        },
        "fullBlockSelectionBox": {
          "type": "boolean"
        },
        "gravityAffected": {
          "type": "boolean"
        },
        "groundLuminance": {
          "type": "number",
          "format": "double"
        },
        "guiId": {
          "$ref": "#/definitions/GuiIdProperty"
        },
        "hardness": {
          "type": "number",
          "format": "double"
        },
        "heldItem": {
          "$ref": "#/definitions/CatalogType"
        },
        "identifiable": {
          "$ref": "#/definitions/Identifiable"
        },
        "indirectlyPowered": {
          "type": "boolean"
        },
        "instrument": {
          "$ref": "#/definitions/CatalogType"
        },
        "inventoryCapacity": {
          "$ref": "#/definitions/InventoryCapacity"
        },
        "inventoryDimension": {
          "$ref": "#/definitions/InventoryDimension"
        },
        "inventoryTitle": {
          "$ref": "#/definitions/InventoryTitle"
        },
        "lightEmission": {
          "type": "integer",
          "format": "int32"
        },
        "matter": {
          "type": "string",
          "enum": ["SOLID", "LIQUID", "GAS"]
        },
        "passable": {
          "type": "boolean"
        },
        "record": {
          "$ref": "#/definitions/CatalogType"
        },
        "replaceable": {
          "type": "boolean"
        },
        "saturationProperty": {
          "type": "number",
          "format": "double"
        },
        "skyLuminance": {
          "type": "number",
          "format": "double"
        },
        "slotIndex": {
          "$ref": "#/definitions/SlotIndex"
        },
        "slotPos": {
          "$ref": "#/definitions/SlotPos"
        },
        "slotSide": {
          "$ref": "#/definitions/SlotSide"
        },
        "smeltable": {
          "type": "boolean"
        },
        "solidCube": {
          "type": "boolean"
        },
        "statisticsTracked": {
          "type": "boolean"
        },
        "surrogateBlock": {
          "type": "boolean"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "toolType": {
          "$ref": "#/definitions/CatalogType"
        },
        "unbreakable": {
          "type": "boolean"
        },
        "useLimit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CatalogTypeItemType": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "MMCRestrictItem": {
      "type": "object",
      "required": ["banReason", "breakingBanned", "dropBanned", "item", "link", "ownershipBanned", "placingBanned", "usageBanned", "worldBanned"],
      "properties": {
        "banReason": {
          "type": "string",
          "description": "The reason why the item is banned"
        },
        "breakingBanned": {
          "type": "boolean",
          "description": "True if breaking of this item is banned, false otherwise"
        },
        "dropBanned": {
          "type": "boolean",
          "description": "True if dropping this item is banned, false otherwise"
        },
        "item": {
          "description": "The item type that is banned",
          "$ref": "#/definitions/CatalogTypeItemType"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "ownershipBanned": {
          "type": "boolean",
          "description": "True if ownership of this item is banned, false otherwise"
        },
        "placingBanned": {
          "type": "boolean",
          "description": "True if the placing of this item is banned, false otherwise"
        },
        "usageBanned": {
          "type": "boolean",
          "description": "True if the usage of this item is banned, false otherwise"
        },
        "worldBanned": {
          "type": "boolean",
          "description": "True if this item is banned from the world, false otherwise?"
        }
      }
    },
    "Advancement": {
      "type": "object",
      "required": ["id", "link", "name", "title"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of the advancement"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the advancement"
        },
        "title": {
          "type": "string",
          "description": "The title of the advancement"
        },
        "announceToChat": {
          "type": "boolean",
          "description": "True if the achieving of this advancement is announced in chat, false otherwise"
        },
        "description": {
          "type": "string",
          "description": "The description of the advancement"
        },
        "hidden": {
          "type": "boolean",
          "description": "True if this is a hidden advancement"
        },
        "parent": {
          "description": "The parent advancement, which must be unlocked prior to this advancement",
          "$ref": "#/definitions/Advancement"
        },
        "showToast": {
          "type": "boolean",
          "description": "True if achieving this advancement shows the player a toast message, false otherwise"
        },
        "tree": {
          "description": "The advancement tree that this advancement belongs to",
          "$ref": "#/definitions/CatalogTypeAdvancementTree"
        }
      }
    },
    "CatalogTypeAdvancementTree": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "CatalogTypeDifficulty": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "CatalogTypeDimensionType": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "CatalogTypeGameMode": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "CatalogTypeGeneratorType": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "CatalogTypeWeather": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id that indexes this catalog type"
        },
        "name": {
          "type": "string",
          "description": "The name of the catalog type",
          "readOnly": true
        }
      }
    },
    "Inventory": {
      "type": "object",
      "required": ["capacity", "itemStacks", "link", "name", "totalItems", "type"],
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum capacity of the inventory (maximum number of stacks)"
        },
        "itemStacks": {
          "type": "array",
          "description": "Gets a list of item stacks in the inventory",
          "items": {
            "$ref": "#/definitions/ItemStack"
          }
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the inventory"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32",
          "description": "The total amount of items currently in the inventory"
        },
        "type": {
          "description": "The type of the inventory",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": ["position", "world"],
      "properties": {
        "position": {
          "description": "The position within the world that this location refers to",
          "$ref": "#/definitions/Vector3d"
        },
        "world": {
          "description": "The world this location refers to",
          "$ref": "#/definitions/World"
        }
      }
    },
    "MMCTicketsTicket": {
      "type": "object",
      "required": ["id", "link", "message", "status", "timestamp"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of this ticket"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The message sent along with this ticket"
        },
        "status": {
          "type": "string",
          "description": "The current status of the ticket",
          "enum": ["Open", "Claimed", "Held", "Closed"]
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The unix timestamp (in seconds) when this ticket was submitted"
        },
        "comment": {
          "type": "string",
          "description": "The comment added by staff to this ticket"
        },
        "location": {
          "description": "The location at which this ticket was submitted",
          "$ref": "#/definitions/Location"
        },
        "notified": {
          "type": "integer",
          "format": "int32",
          "description": "True if staff has been notified about this ticket, false otherwise"
        },
        "sender": {
          "description": "The sender of this ticket",
          "$ref": "#/definitions/PlayerFull"
        },
        "staff": {
          "description": "The staff member that was assigned to this ticket",
          "$ref": "#/definitions/Player"
        }
      }
    },
    "Player": {
      "type": "object",
      "required": ["link", "name", "online", "uuid"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The players name"
        },
        "online": {
          "type": "boolean",
          "description": "True if the player is online, false otherwise"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The unique UUID of this player"
        }
      }
    },
    "PlayerFull": {
      "allOf": [{
        "$ref": "#/definitions/Player"
      }, {
        "type": "object",
        "required": ["address", "latency", "location", "rotation", "scale", "unlockedAdvancements", "velocity"],
        "properties": {
          "unlockedAdvancements": {
            "type": "array",
            "description": "A list of all unlocked advancements of this player",
            "items": {
              "$ref": "#/definitions/Advancement"
            }
          },
          "latency": {
            "type": "integer",
            "format": "int32",
            "description": "The latency (in milliseconds) of the player"
          },
          "rotation": {
            "description": "The current rotation of the player",
            "$ref": "#/definitions/Vector3d"
          },
          "scale": {
            "description": "The current scale of the player",
            "$ref": "#/definitions/Vector3d"
          },
          "velocity": {
            "description": "The current velocity of the player",
            "$ref": "#/definitions/Vector3d"
          },
          "inventory": {
            "$ref": "#/definitions/Inventory"
          },
          "leggings": {
            "description": "The item stack that the player is wearing as leggings",
            "$ref": "#/definitions/ItemStack"
          },
          "helmet": {
            "description": "The item stack that the player is wearing as a helmet",
            "$ref": "#/definitions/ItemStack"
          },
          "chestplate": {
            "description": "The item stack that the player is wearing as chestplate",
            "$ref": "#/definitions/ItemStack"
          },
          "boots": {
            "description": "The item stack that the player is wearing as boots",
            "$ref": "#/definitions/ItemStack"
          },
          "address": {
            "type": "string",
            "description": "The player's IP address and port"
          },
          "location": {
            "description": "The current Location of the player",
            "$ref": "#/definitions/Location"
          },
          "absorption": {
            "type": "number",
            "format": "double"
          },
          "age": {
            "$ref": "#/definitions/AgeableData"
          },
          "aggressive": {
            "type": "boolean"
          },
          "aiEnabled": {
            "type": "boolean"
          },
          "angerLevel": {
            "type": "integer",
            "format": "int32"
          },
          "armorStand": {
            "$ref": "#/definitions/ArmorStandData"
          },
          "art": {
            "$ref": "#/definitions/CatalogType"
          },
          "attached": {
            "type": "boolean"
          },
          "author": {
            "type": "string"
          },
          "axis": {
            "type": "string",
            "enum": ["X", "Y", "Z"]
          },
          "banner": {
            "$ref": "#/definitions/BannerData"
          },
          "beacon": {
            "$ref": "#/definitions/BeaconData"
          },
          "bigMushroom": {
            "$ref": "#/definitions/CatalogType"
          },
          "block": {
            "$ref": "#/definitions/BlockState"
          },
          "breathing": {
            "$ref": "#/definitions/BreathingData"
          },
          "breedable": {
            "type": "boolean"
          },
          "brewingStand": {
            "$ref": "#/definitions/BrewingStandData"
          },
          "brick": {
            "$ref": "#/definitions/CatalogType"
          },
          "career": {
            "$ref": "#/definitions/Career"
          },
          "charged": {
            "type": "boolean"
          },
          "coal": {
            "$ref": "#/definitions/CatalogType"
          },
          "color": {
            "$ref": "#/definitions/Color"
          },
          "command": {
            "$ref": "#/definitions/CommandData"
          },
          "comparator": {
            "$ref": "#/definitions/CatalogType"
          },
          "connectedDirection": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
            }
          },
          "cookedFish": {
            "$ref": "#/definitions/CatalogType"
          },
          "cooldown": {
            "type": "integer",
            "format": "int32"
          },
          "criticalHit": {
            "type": "boolean"
          },
          "customName": {
            "type": "boolean"
          },
          "damage": {
            "type": "number",
            "format": "double"
          },
          "damageable": {
            "$ref": "#/definitions/DamageableData"
          },
          "decayable": {
            "type": "boolean"
          },
          "delay": {
            "type": "integer",
            "format": "int32"
          },
          "despawnDelay": {
            "$ref": "#/definitions/DespawnDelayData"
          },
          "direction": {
            "type": "string",
            "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
          },
          "dirt": {
            "$ref": "#/definitions/CatalogType"
          },
          "disarmed": {
            "type": "boolean"
          },
          "disguisedBlock": {
            "$ref": "#/definitions/CatalogType"
          },
          "displayName": {
            "type": "string"
          },
          "dominantHand": {
            "$ref": "#/definitions/CatalogType"
          },
          "doublePlant": {
            "$ref": "#/definitions/CatalogType"
          },
          "drops": {
            "type": "boolean"
          },
          "durability": {
            "$ref": "#/definitions/DurabilityData"
          },
          "dye": {
            "$ref": "#/definitions/DyeColor"
          },
          "enchantments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Enchantment"
            }
          },
          "endGateway": {
            "$ref": "#/definitions/EndGatewayData"
          },
          "expOrb": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "$ref": "#/definitions/ExperienceHolderData"
          },
          "expireTicks": {
            "type": "integer",
            "format": "int32"
          },
          "explosionRadius": {
            "type": "integer",
            "format": "int32"
          },
          "extended": {
            "type": "boolean"
          },
          "fallDistance": {
            "type": "number",
            "format": "float"
          },
          "fallingBlock": {
            "$ref": "#/definitions/FallingBlockData"
          },
          "filled": {
            "type": "boolean"
          },
          "fireworkEffects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FireworkEffect"
            }
          },
          "fireworkRocket": {
            "$ref": "#/definitions/FireworkRocketData"
          },
          "fish": {
            "$ref": "#/definitions/CatalogType"
          },
          "flammable": {
            "type": "boolean"
          },
          "fluid": {
            "$ref": "#/definitions/FluidStack"
          },
          "fluidLevel": {
            "type": "integer",
            "format": "int32"
          },
          "fluidTanks": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FluidStack"
              }
            }
          },
          "flying": {
            "type": "boolean"
          },
          "flyingAbility": {
            "type": "boolean"
          },
          "food": {
            "$ref": "#/definitions/FoodData"
          },
          "furnace": {
            "$ref": "#/definitions/FurnaceData"
          },
          "fuse": {
            "$ref": "#/definitions/FuseData"
          },
          "gameMode": {
            "$ref": "#/definitions/GameMode"
          },
          "generation": {
            "type": "integer",
            "format": "int32"
          },
          "glowing": {
            "type": "boolean"
          },
          "goldenApple": {
            "$ref": "#/definitions/CatalogType"
          },
          "griefs": {
            "type": "boolean"
          },
          "growth": {
            "$ref": "#/definitions/GrowthData"
          },
          "health": {
            "$ref": "#/definitions/HealthData"
          },
          "hide": {
            "$ref": "#/definitions/HideData"
          },
          "hinge": {
            "$ref": "#/definitions/CatalogType"
          },
          "horse": {
            "$ref": "#/definitions/HorseData"
          },
          "igniteable": {
            "$ref": "#/definitions/IgniteableData"
          },
          "inWall": {
            "type": "boolean"
          },
          "invisibility": {
            "$ref": "#/definitions/InvisibilityData"
          },
          "invulnerability": {
            "$ref": "#/definitions/InvulnerabilityData"
          },
          "joined": {
            "$ref": "#/definitions/JoinData"
          },
          "knockback": {
            "type": "integer",
            "format": "int32"
          },
          "layer": {
            "type": "integer",
            "format": "int32"
          },
          "leash": {
            "$ref": "#/definitions/LeashData"
          },
          "lockToken": {
            "type": "string"
          },
          "logAxis": {
            "$ref": "#/definitions/CatalogType"
          },
          "lore": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minecartBlock": {
            "$ref": "#/definitions/MinecartBlockData"
          },
          "mobSpawner": {
            "$ref": "#/definitions/MobSpawnerData"
          },
          "moisture": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "$ref": "#/definitions/CatalogType"
          },
          "occupied": {
            "type": "boolean"
          },
          "ocelot": {
            "$ref": "#/definitions/CatalogType"
          },
          "open": {
            "type": "boolean"
          },
          "pages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passengers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "persists": {
            "type": "boolean"
          },
          "pickupDelay": {
            "$ref": "#/definitions/PickupDelayData"
          },
          "pickupRule": {
            "$ref": "#/definitions/CatalogType"
          },
          "pigSaddle": {
            "type": "boolean"
          },
          "piston": {
            "$ref": "#/definitions/CatalogType"
          },
          "placeableOn": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/definitions/CatalogType"
            }
          },
          "plant": {
            "$ref": "#/definitions/CatalogType"
          },
          "playerCreated": {
            "type": "boolean"
          },
          "playing": {
            "type": "boolean"
          },
          "portion": {
            "$ref": "#/definitions/CatalogType"
          },
          "potionEffects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PotionEffect"
            }
          },
          "powered": {
            "type": "boolean"
          },
          "prismarine": {
            "$ref": "#/definitions/CatalogType"
          },
          "quartz": {
            "$ref": "#/definitions/CatalogType"
          },
          "rabbit": {
            "$ref": "#/definitions/CatalogType"
          },
          "railDirection": {
            "$ref": "#/definitions/CatalogType"
          },
          "redstonePower": {
            "type": "integer",
            "format": "int32"
          },
          "representedItem": {
            "$ref": "#/definitions/ItemStack"
          },
          "representedPlayer": {
            "type": "string"
          },
          "respawnLocations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Location"
            }
          },
          "sand": {
            "$ref": "#/definitions/CatalogType"
          },
          "sandStone": {
            "$ref": "#/definitions/CatalogType"
          },
          "screaming": {
            "type": "boolean"
          },
          "seamless": {
            "type": "boolean"
          },
          "shatters": {
            "type": "boolean"
          },
          "sheared": {
            "type": "boolean"
          },
          "shrub": {
            "$ref": "#/definitions/CatalogType"
          },
          "sign": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "silent": {
            "type": "boolean"
          },
          "sitting": {
            "type": "boolean"
          },
          "skin": {
            "type": "string",
            "format": "uuid"
          },
          "skull": {
            "$ref": "#/definitions/CatalogType"
          },
          "slab": {
            "$ref": "#/definitions/CatalogType"
          },
          "sleeping": {
            "type": "boolean"
          },
          "slime": {
            "$ref": "#/definitions/SlimeData"
          },
          "sneaking": {
            "type": "boolean"
          },
          "snow": {
            "type": "boolean"
          },
          "spawn": {
            "$ref": "#/definitions/CatalogType"
          },
          "sprinting": {
            "type": "boolean"
          },
          "stairShape": {
            "$ref": "#/definitions/CatalogType"
          },
          "statistics": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Stat"
            }
          },
          "stone": {
            "$ref": "#/definitions/CatalogType"
          },
          "storedEnchantments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Enchantment"
            }
          },
          "structure": {
            "$ref": "#/definitions/StructureData"
          },
          "stuckArrows": {
            "type": "integer",
            "format": "int32"
          },
          "tamed": {
            "$ref": "#/definitions/TameableData"
          },
          "target": {
            "$ref": "#/definitions/Vector3d"
          },
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TradeOffer"
            }
          },
          "tree": {
            "$ref": "#/definitions/CatalogType"
          },
          "vehicle": {
            "$ref": "#/definitions/VehicleData"
          },
          "wall": {
            "$ref": "#/definitions/CatalogType"
          },
          "wet": {
            "type": "boolean"
          },
          "wires": {
            "$ref": "#/definitions/WireAttachmentData"
          },
          "acceptsItems": {
            "$ref": "#/definitions/AcceptsItems"
          },
          "applicableEffect": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/definitions/PotionEffect"
            }
          },
          "armorSlotType": {
            "$ref": "#/definitions/ArmorSlotType"
          },
          "armorType": {
            "$ref": "#/definitions/CatalogType"
          },
          "blastResistance": {
            "type": "number",
            "format": "double"
          },
          "burningFuel": {
            "type": "integer",
            "format": "int32"
          },
          "damageAbsorption": {
            "type": "integer",
            "format": "int32"
          },
          "efficiency": {
            "type": "number",
            "format": "double"
          },
          "equipmentType": {
            "$ref": "#/definitions/CatalogType"
          },
          "equiptmentSlotType": {
            "$ref": "#/definitions/EquipmentSlotType"
          },
          "eyeHeight": {
            "type": "number",
            "format": "double"
          },
          "eyeLocation": {
            "$ref": "#/definitions/Vector3d"
          },
          "fluidTemperature": {
            "type": "integer",
            "format": "int32"
          },
          "fluidViscosity": {
            "type": "integer",
            "format": "int32"
          },
          "foodRestoration": {
            "type": "integer",
            "format": "int32"
          },
          "fullBlockSelectionBox": {
            "type": "boolean"
          },
          "gravityAffected": {
            "type": "boolean"
          },
          "groundLuminance": {
            "type": "number",
            "format": "double"
          },
          "guiId": {
            "$ref": "#/definitions/GuiIdProperty"
          },
          "hardness": {
            "type": "number",
            "format": "double"
          },
          "heldItem": {
            "$ref": "#/definitions/CatalogType"
          },
          "identifiable": {
            "$ref": "#/definitions/Identifiable"
          },
          "indirectlyPowered": {
            "type": "boolean"
          },
          "instrument": {
            "$ref": "#/definitions/CatalogType"
          },
          "inventoryCapacity": {
            "$ref": "#/definitions/InventoryCapacity"
          },
          "inventoryDimension": {
            "$ref": "#/definitions/InventoryDimension"
          },
          "inventoryTitle": {
            "$ref": "#/definitions/InventoryTitle"
          },
          "lightEmission": {
            "type": "integer",
            "format": "int32"
          },
          "matter": {
            "type": "string",
            "enum": ["SOLID", "LIQUID", "GAS"]
          },
          "passable": {
            "type": "boolean"
          },
          "record": {
            "$ref": "#/definitions/CatalogType"
          },
          "replaceable": {
            "type": "boolean"
          },
          "saturationProperty": {
            "type": "number",
            "format": "double"
          },
          "skyLuminance": {
            "type": "number",
            "format": "double"
          },
          "slotIndex": {
            "$ref": "#/definitions/SlotIndex"
          },
          "slotPos": {
            "$ref": "#/definitions/SlotPos"
          },
          "slotSide": {
            "$ref": "#/definitions/SlotSide"
          },
          "smeltable": {
            "type": "boolean"
          },
          "solidCube": {
            "type": "boolean"
          },
          "statisticsTracked": {
            "type": "boolean"
          },
          "surrogateBlock": {
            "type": "boolean"
          },
          "temperature": {
            "type": "number",
            "format": "double"
          },
          "toolType": {
            "$ref": "#/definitions/CatalogType"
          },
          "unbreakable": {
            "type": "boolean"
          },
          "useLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      }]
    },
    "Vector3d": {
      "type": "object",
      "required": ["x", "y", "z"],
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "The x-coordinate"
        },
        "y": {
          "type": "number",
          "format": "double",
          "description": "The y-coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "description": "The z-coordinate"
        }
      }
    },
    "Vector3i": {
      "type": "object",
      "required": ["x", "y", "z"],
      "properties": {
        "x": {
          "type": "integer",
          "format": "int32",
          "description": "The x-coordinate"
        },
        "y": {
          "type": "integer",
          "format": "int32",
          "description": "The y-coordinate"
        },
        "z": {
          "type": "integer",
          "format": "int32",
          "description": "The z-coordinate"
        }
      }
    },
    "World": {
      "type": "object",
      "required": ["link", "loaded", "name", "uuid"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "loaded": {
          "type": "boolean",
          "description": "True if the world is loaded, false otherwise"
        },
        "name": {
          "type": "string",
          "description": "The name of this world"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The unique UUID that identifies this world"
        }
      }
    },
    "WorldBorder": {
      "type": "object",
      "required": ["center", "damageAmount", "damageThreshold", "diameter", "link", "newDiameter", "timeRemaining", "warningDistance", "warningTime"],
      "properties": {
        "center": {
          "description": "The center of the world border",
          "$ref": "#/definitions/Vector3d"
        },
        "damageAmount": {
          "type": "number",
          "format": "double",
          "description": "The amount of damage done to players outside the border"
        },
        "damageThreshold": {
          "type": "number",
          "format": "double",
          "description": "The maximum amount of damage done to a player"
        },
        "diameter": {
          "type": "number",
          "format": "double",
          "description": "The diameter of the border"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "newDiameter": {
          "type": "number",
          "format": "double",
          "description": "The new diameter of the border, in case it is collapsing/expanding"
        },
        "timeRemaining": {
          "type": "integer",
          "format": "int64",
          "description": "The time remaining until the border reaches it's new size"
        },
        "warningDistance": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of distance from the border a player will receive a warning at"
        },
        "warningTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time near a border before a warning is shown for players"
        }
      }
    },
    "WorldFull": {
      "allOf": [{
        "$ref": "#/definitions/World"
      }, {
        "type": "object",
        "required": ["allowCommands", "border", "difficulty", "dimensionType", "gameRules", "generateBonusChests", "generatorType", "keepSpawnLoaded", "loadOnStartup", "mapFeaturesEnabled", "seed", "time", "weather"],
        "properties": {
          "loadOnStartup": {
            "type": "boolean",
            "description": "True if this world is loaded when the server starts, false otherwise"
          },
          "keepSpawnLoaded": {
            "type": "boolean",
            "description": "True if the spawn of this world is always kept loaded, false otherwise"
          },
          "allowCommands": {
            "type": "boolean",
            "description": "True if commands are allowed to be executed in this world, false otherwise"
          },
          "generateBonusChests": {
            "type": "boolean",
            "description": "True if bonus chests are generated for this world, false otherwise"
          },
          "mapFeaturesEnabled": {
            "type": "boolean",
            "description": "True if map specific features are enabled for this world, false otherwise"
          },
          "border": {
            "description": "The border of the world",
            "$ref": "#/definitions/WorldBorder"
          },
          "spawn": {
            "$ref": "#/definitions/CatalogType"
          },
          "seed": {
            "type": "integer",
            "format": "int64",
            "description": "The seed of the world"
          },
          "time": {
            "type": "integer",
            "format": "int64",
            "description": "The current time in the world"
          },
          "difficulty": {
            "description": "The difficulty of the world",
            "$ref": "#/definitions/CatalogTypeDifficulty"
          },
          "gameRules": {
            "type": "object",
            "description": "A map of world rule names to values",
            "additionalProperties": {
              "type": "string"
            }
          },
          "weather": {
            "description": "The current weather in the world",
            "$ref": "#/definitions/CatalogTypeWeather"
          },
          "gameMode": {
            "$ref": "#/definitions/GameMode"
          },
          "generatorType": {
            "description": "The generator type used for this world",
            "$ref": "#/definitions/CatalogTypeGeneratorType"
          },
          "dimensionType": {
            "description": "The dimension of the world",
            "$ref": "#/definitions/CatalogTypeDimensionType"
          },
          "absorption": {
            "type": "number",
            "format": "double"
          },
          "age": {
            "$ref": "#/definitions/AgeableData"
          },
          "aggressive": {
            "type": "boolean"
          },
          "aiEnabled": {
            "type": "boolean"
          },
          "angerLevel": {
            "type": "integer",
            "format": "int32"
          },
          "armorStand": {
            "$ref": "#/definitions/ArmorStandData"
          },
          "art": {
            "$ref": "#/definitions/CatalogType"
          },
          "attached": {
            "type": "boolean"
          },
          "author": {
            "type": "string"
          },
          "axis": {
            "type": "string",
            "enum": ["X", "Y", "Z"]
          },
          "banner": {
            "$ref": "#/definitions/BannerData"
          },
          "beacon": {
            "$ref": "#/definitions/BeaconData"
          },
          "bigMushroom": {
            "$ref": "#/definitions/CatalogType"
          },
          "block": {
            "$ref": "#/definitions/BlockState"
          },
          "breathing": {
            "$ref": "#/definitions/BreathingData"
          },
          "breedable": {
            "type": "boolean"
          },
          "brewingStand": {
            "$ref": "#/definitions/BrewingStandData"
          },
          "brick": {
            "$ref": "#/definitions/CatalogType"
          },
          "career": {
            "$ref": "#/definitions/Career"
          },
          "charged": {
            "type": "boolean"
          },
          "coal": {
            "$ref": "#/definitions/CatalogType"
          },
          "color": {
            "$ref": "#/definitions/Color"
          },
          "command": {
            "$ref": "#/definitions/CommandData"
          },
          "comparator": {
            "$ref": "#/definitions/CatalogType"
          },
          "connectedDirection": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
            }
          },
          "cookedFish": {
            "$ref": "#/definitions/CatalogType"
          },
          "cooldown": {
            "type": "integer",
            "format": "int32"
          },
          "criticalHit": {
            "type": "boolean"
          },
          "customName": {
            "type": "boolean"
          },
          "damage": {
            "type": "number",
            "format": "double"
          },
          "damageable": {
            "$ref": "#/definitions/DamageableData"
          },
          "decayable": {
            "type": "boolean"
          },
          "delay": {
            "type": "integer",
            "format": "int32"
          },
          "despawnDelay": {
            "$ref": "#/definitions/DespawnDelayData"
          },
          "direction": {
            "type": "string",
            "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
          },
          "dirt": {
            "$ref": "#/definitions/CatalogType"
          },
          "disarmed": {
            "type": "boolean"
          },
          "disguisedBlock": {
            "$ref": "#/definitions/CatalogType"
          },
          "displayName": {
            "type": "string"
          },
          "dominantHand": {
            "$ref": "#/definitions/CatalogType"
          },
          "doublePlant": {
            "$ref": "#/definitions/CatalogType"
          },
          "drops": {
            "type": "boolean"
          },
          "durability": {
            "$ref": "#/definitions/DurabilityData"
          },
          "dye": {
            "$ref": "#/definitions/DyeColor"
          },
          "enchantments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Enchantment"
            }
          },
          "endGateway": {
            "$ref": "#/definitions/EndGatewayData"
          },
          "expOrb": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "$ref": "#/definitions/ExperienceHolderData"
          },
          "expireTicks": {
            "type": "integer",
            "format": "int32"
          },
          "explosionRadius": {
            "type": "integer",
            "format": "int32"
          },
          "extended": {
            "type": "boolean"
          },
          "fallDistance": {
            "type": "number",
            "format": "float"
          },
          "fallingBlock": {
            "$ref": "#/definitions/FallingBlockData"
          },
          "filled": {
            "type": "boolean"
          },
          "fireworkEffects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FireworkEffect"
            }
          },
          "fireworkRocket": {
            "$ref": "#/definitions/FireworkRocketData"
          },
          "fish": {
            "$ref": "#/definitions/CatalogType"
          },
          "flammable": {
            "type": "boolean"
          },
          "fluid": {
            "$ref": "#/definitions/FluidStack"
          },
          "fluidLevel": {
            "type": "integer",
            "format": "int32"
          },
          "fluidTanks": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FluidStack"
              }
            }
          },
          "flying": {
            "type": "boolean"
          },
          "flyingAbility": {
            "type": "boolean"
          },
          "food": {
            "$ref": "#/definitions/FoodData"
          },
          "furnace": {
            "$ref": "#/definitions/FurnaceData"
          },
          "fuse": {
            "$ref": "#/definitions/FuseData"
          },
          "generation": {
            "type": "integer",
            "format": "int32"
          },
          "glowing": {
            "type": "boolean"
          },
          "goldenApple": {
            "$ref": "#/definitions/CatalogType"
          },
          "griefs": {
            "type": "boolean"
          },
          "growth": {
            "$ref": "#/definitions/GrowthData"
          },
          "health": {
            "$ref": "#/definitions/HealthData"
          },
          "hide": {
            "$ref": "#/definitions/HideData"
          },
          "hinge": {
            "$ref": "#/definitions/CatalogType"
          },
          "horse": {
            "$ref": "#/definitions/HorseData"
          },
          "igniteable": {
            "$ref": "#/definitions/IgniteableData"
          },
          "inWall": {
            "type": "boolean"
          },
          "inventory": {
            "$ref": "#/definitions/Inventory"
          },
          "invisibility": {
            "$ref": "#/definitions/InvisibilityData"
          },
          "invulnerability": {
            "$ref": "#/definitions/InvulnerabilityData"
          },
          "joined": {
            "$ref": "#/definitions/JoinData"
          },
          "knockback": {
            "type": "integer",
            "format": "int32"
          },
          "layer": {
            "type": "integer",
            "format": "int32"
          },
          "leash": {
            "$ref": "#/definitions/LeashData"
          },
          "lockToken": {
            "type": "string"
          },
          "logAxis": {
            "$ref": "#/definitions/CatalogType"
          },
          "lore": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minecartBlock": {
            "$ref": "#/definitions/MinecartBlockData"
          },
          "mobSpawner": {
            "$ref": "#/definitions/MobSpawnerData"
          },
          "moisture": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "$ref": "#/definitions/CatalogType"
          },
          "occupied": {
            "type": "boolean"
          },
          "ocelot": {
            "$ref": "#/definitions/CatalogType"
          },
          "open": {
            "type": "boolean"
          },
          "pages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passengers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "persists": {
            "type": "boolean"
          },
          "pickupDelay": {
            "$ref": "#/definitions/PickupDelayData"
          },
          "pickupRule": {
            "$ref": "#/definitions/CatalogType"
          },
          "pigSaddle": {
            "type": "boolean"
          },
          "piston": {
            "$ref": "#/definitions/CatalogType"
          },
          "placeableOn": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/definitions/CatalogType"
            }
          },
          "plant": {
            "$ref": "#/definitions/CatalogType"
          },
          "playerCreated": {
            "type": "boolean"
          },
          "playing": {
            "type": "boolean"
          },
          "portion": {
            "$ref": "#/definitions/CatalogType"
          },
          "potionEffects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PotionEffect"
            }
          },
          "powered": {
            "type": "boolean"
          },
          "prismarine": {
            "$ref": "#/definitions/CatalogType"
          },
          "quartz": {
            "$ref": "#/definitions/CatalogType"
          },
          "rabbit": {
            "$ref": "#/definitions/CatalogType"
          },
          "railDirection": {
            "$ref": "#/definitions/CatalogType"
          },
          "redstonePower": {
            "type": "integer",
            "format": "int32"
          },
          "representedItem": {
            "$ref": "#/definitions/ItemStack"
          },
          "representedPlayer": {
            "type": "string"
          },
          "respawnLocations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Location"
            }
          },
          "sand": {
            "$ref": "#/definitions/CatalogType"
          },
          "sandStone": {
            "$ref": "#/definitions/CatalogType"
          },
          "screaming": {
            "type": "boolean"
          },
          "seamless": {
            "type": "boolean"
          },
          "shatters": {
            "type": "boolean"
          },
          "sheared": {
            "type": "boolean"
          },
          "shrub": {
            "$ref": "#/definitions/CatalogType"
          },
          "sign": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "silent": {
            "type": "boolean"
          },
          "sitting": {
            "type": "boolean"
          },
          "skin": {
            "type": "string",
            "format": "uuid"
          },
          "skull": {
            "$ref": "#/definitions/CatalogType"
          },
          "slab": {
            "$ref": "#/definitions/CatalogType"
          },
          "sleeping": {
            "type": "boolean"
          },
          "slime": {
            "$ref": "#/definitions/SlimeData"
          },
          "sneaking": {
            "type": "boolean"
          },
          "snow": {
            "type": "boolean"
          },
          "sprinting": {
            "type": "boolean"
          },
          "stairShape": {
            "$ref": "#/definitions/CatalogType"
          },
          "statistics": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Stat"
            }
          },
          "stone": {
            "$ref": "#/definitions/CatalogType"
          },
          "storedEnchantments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Enchantment"
            }
          },
          "structure": {
            "$ref": "#/definitions/StructureData"
          },
          "stuckArrows": {
            "type": "integer",
            "format": "int32"
          },
          "tamed": {
            "$ref": "#/definitions/TameableData"
          },
          "target": {
            "$ref": "#/definitions/Vector3d"
          },
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TradeOffer"
            }
          },
          "tree": {
            "$ref": "#/definitions/CatalogType"
          },
          "vehicle": {
            "$ref": "#/definitions/VehicleData"
          },
          "wall": {
            "$ref": "#/definitions/CatalogType"
          },
          "wet": {
            "type": "boolean"
          },
          "wires": {
            "$ref": "#/definitions/WireAttachmentData"
          },
          "acceptsItems": {
            "$ref": "#/definitions/AcceptsItems"
          },
          "applicableEffect": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/definitions/PotionEffect"
            }
          },
          "armorSlotType": {
            "$ref": "#/definitions/ArmorSlotType"
          },
          "armorType": {
            "$ref": "#/definitions/CatalogType"
          },
          "blastResistance": {
            "type": "number",
            "format": "double"
          },
          "burningFuel": {
            "type": "integer",
            "format": "int32"
          },
          "damageAbsorption": {
            "type": "integer",
            "format": "int32"
          },
          "efficiency": {
            "type": "number",
            "format": "double"
          },
          "equipmentType": {
            "$ref": "#/definitions/CatalogType"
          },
          "equiptmentSlotType": {
            "$ref": "#/definitions/EquipmentSlotType"
          },
          "eyeHeight": {
            "type": "number",
            "format": "double"
          },
          "eyeLocation": {
            "$ref": "#/definitions/Vector3d"
          },
          "fluidTemperature": {
            "type": "integer",
            "format": "int32"
          },
          "fluidViscosity": {
            "type": "integer",
            "format": "int32"
          },
          "foodRestoration": {
            "type": "integer",
            "format": "int32"
          },
          "fullBlockSelectionBox": {
            "type": "boolean"
          },
          "gravityAffected": {
            "type": "boolean"
          },
          "groundLuminance": {
            "type": "number",
            "format": "double"
          },
          "guiId": {
            "$ref": "#/definitions/GuiIdProperty"
          },
          "hardness": {
            "type": "number",
            "format": "double"
          },
          "heldItem": {
            "$ref": "#/definitions/CatalogType"
          },
          "identifiable": {
            "$ref": "#/definitions/Identifiable"
          },
          "indirectlyPowered": {
            "type": "boolean"
          },
          "instrument": {
            "$ref": "#/definitions/CatalogType"
          },
          "inventoryCapacity": {
            "$ref": "#/definitions/InventoryCapacity"
          },
          "inventoryDimension": {
            "$ref": "#/definitions/InventoryDimension"
          },
          "inventoryTitle": {
            "$ref": "#/definitions/InventoryTitle"
          },
          "lightEmission": {
            "type": "integer",
            "format": "int32"
          },
          "matter": {
            "type": "string",
            "enum": ["SOLID", "LIQUID", "GAS"]
          },
          "passable": {
            "type": "boolean"
          },
          "record": {
            "$ref": "#/definitions/CatalogType"
          },
          "replaceable": {
            "type": "boolean"
          },
          "saturationProperty": {
            "type": "number",
            "format": "double"
          },
          "skyLuminance": {
            "type": "number",
            "format": "double"
          },
          "slotIndex": {
            "$ref": "#/definitions/SlotIndex"
          },
          "slotPos": {
            "$ref": "#/definitions/SlotPos"
          },
          "slotSide": {
            "$ref": "#/definitions/SlotSide"
          },
          "smeltable": {
            "type": "boolean"
          },
          "solidCube": {
            "type": "boolean"
          },
          "statisticsTracked": {
            "type": "boolean"
          },
          "surrogateBlock": {
            "type": "boolean"
          },
          "temperature": {
            "type": "number",
            "format": "double"
          },
          "toolType": {
            "$ref": "#/definitions/CatalogType"
          },
          "unbreakable": {
            "type": "boolean"
          },
          "useLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      }]
    },
    "NucleusKit": {
      "type": "object",
      "required": ["commands", "cooldown", "cost", "firstJoinKit", "link", "name", "oneTime", "stacks"],
      "properties": {
        "commands": {
          "type": "array",
          "description": "The commands that are executed when this kit is purchased/acquired by a player",
          "items": {
            "type": "string"
          }
        },
        "cooldown": {
          "type": "integer",
          "format": "int64",
          "description": "The cooldown (in seconds) this kit is on after buying it (per player)"
        },
        "cost": {
          "type": "number",
          "format": "double",
          "description": "The cost to buy this kit"
        },
        "firstJoinKit": {
          "type": "boolean",
          "description": "True if this kit is awarded for joining the server the first time, false otherwise"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The unique name of this kit"
        },
        "oneTime": {
          "type": "boolean",
          "description": "True if this kit can only be purchased/acquired once, false otherwise"
        },
        "stacks": {
          "type": "array",
          "description": "The ItemStacks that are awarded to the player who buys/acquires this kit",
          "items": {
            "$ref": "#/definitions/ItemStack"
          }
        }
      }
    },
    "NucleusNamedLocation": {
      "type": "object",
      "required": ["link", "location", "name", "rotation"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "location": {
          "description": "The location of the jail",
          "$ref": "#/definitions/Location"
        },
        "name": {
          "type": "string",
          "description": "The unique name of this jail"
        },
        "rotation": {
          "description": "The rotation of players within the jail",
          "$ref": "#/definitions/Vector3d"
        }
      }
    },
    "NucleusMailMessage": {
      "type": "object",
      "required": ["date", "message"],
      "properties": {
        "date": {
          "type": "integer",
          "format": "int64",
          "description": "The instant when the message was sent"
        },
        "message": {
          "type": "string",
          "description": "The message content"
        },
        "sender": {
          "description": "The sender of the message",
          "$ref": "#/definitions/Player"
        }
      }
    },
    "RedProtectRegion": {
      "type": "object",
      "required": ["id", "link", "max", "min", "name", "world"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of this region"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "max": {
          "description": "The maximum coordinates that define the region",
          "$ref": "#/definitions/Vector3d"
        },
        "min": {
          "description": "The minimum coordinates that define the region",
          "$ref": "#/definitions/Vector3d"
        },
        "name": {
          "type": "string",
          "description": "The name of this region"
        },
        "world": {
          "description": "The world this region is located in",
          "$ref": "#/definitions/World"
        },
        "admins": {
          "type": "array",
          "description": "A list of players that are admins of this region",
          "items": {
            "$ref": "#/definitions/Player"
          }
        },
        "canDelete": {
          "type": "boolean",
          "description": "True if this region can be deleted, false otherwise"
        },
        "date": {
          "type": "string",
          "description": "The date this region was created?"
        },
        "flags": {
          "type": "object",
          "description": "A map of flags applicable to this region",
          "additionalProperties": {
            "type": "object"
          }
        },
        "leaders": {
          "type": "array",
          "description": "A list of players that are leaders of this region",
          "items": {
            "$ref": "#/definitions/Player"
          }
        },
        "members": {
          "type": "array",
          "description": "A list of players that are members of this region",
          "items": {
            "$ref": "#/definitions/Player"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority of this region compared to other regions"
        },
        "tpPoint": {
          "description": "The teleport point for this region",
          "$ref": "#/definitions/Location"
        },
        "welcomeMessage": {
          "type": "string",
          "description": "The welcome message displayed to a player when they enter this region"
        }
      }
    },
    "UniversalMarketItem": {
      "type": "object",
      "required": ["display", "expires", "item", "link", "owner", "price"],
      "properties": {
        "display": {
          "description": "The ItemStack displayed to the users",
          "$ref": "#/definitions/ItemStack"
        },
        "expires": {
          "type": "integer",
          "format": "int64",
          "description": "The unix timestamp (in seconds) at which this offer will expire"
        },
        "item": {
          "description": "The ItemStack that is being sold",
          "$ref": "#/definitions/ItemStack"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "owner": {
          "description": "The owner that submitted this offer",
          "$ref": "#/definitions/Player"
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "The price this item is being sold for"
        }
      }
    },
    "WebBooksBook": {
      "type": "object",
      "required": ["html", "id", "lines", "link", "title"],
      "properties": {
        "html": {
          "type": "string",
          "description": "The HTML representation of this book",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The unique id of this book",
          "readOnly": true
        },
        "lines": {
          "type": "array",
          "description": "A list of lines that make up this book",
          "items": {
            "type": "string"
          }
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of this book"
        }
      }
    },
    "BlockOperation": {
      "type": "object",
      "required": ["error", "errored", "estimatedSecondsRemaining", "link", "max", "min", "progress", "status", "type", "uuid", "world"],
      "properties": {
        "error": {
          "type": "string",
          "description": "The error message, if any"
        },
        "errored": {
          "type": "boolean",
          "description": "True if this block operation produced errors, false otherwise."
        },
        "estimatedSecondsRemaining": {
          "type": "number",
          "format": "float",
          "description": "The estimated amount of time remaining until this block operation is complete (in seconds)"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "max": {
          "description": "The maximum block belonging to this operation",
          "$ref": "#/definitions/Vector3i"
        },
        "min": {
          "description": "The minimum block belonging to this operation",
          "$ref": "#/definitions/Vector3i"
        },
        "progress": {
          "type": "number",
          "format": "float",
          "description": "The current progress of the block operation, from 0 (=started) to 1 (=finished)"
        },
        "status": {
          "type": "string",
          "description": "The current status of the block operation",
          "enum": ["INIT", "RUNNING", "PAUSED", "DONE", "ERRORED", "CANCELED"]
        },
        "type": {
          "type": "string",
          "description": "The type of block operation",
          "enum": ["GET", "CHANGE"]
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The unique UUID identifying this block operation"
        },
        "world": {
          "description": "The world in which this block operation is running",
          "$ref": "#/definitions/World"
        }
      }
    },
    "BlockState": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Additional data attached to the block state",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "The type of block this block state is from",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "CreateBlockOperationRequest": {
      "type": "object",
      "required": ["max", "min", "type", "world"],
      "properties": {
        "max": {
          "description": "The maximum world coordinates spanning the cube where the operation is run",
          "$ref": "#/definitions/Vector3i"
        },
        "min": {
          "description": "The minimum world coordinates spanning the cube where the operation is run",
          "$ref": "#/definitions/Vector3i"
        },
        "type": {
          "type": "string",
          "description": "The type of the block operation",
          "enum": ["GET", "CHANGE"]
        },
        "world": {
          "type": "string",
          "description": "The world that the operation is run in"
        },
        "block": {
          "description": "The block that we want to change all other blocks into (when using an UPDATE operation",
          "$ref": "#/definitions/BlockState"
        },
        "blocks": {
          "type": "array",
          "description": "An array of blocks defining what each block in the spanned cube",
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockState"
              }
            }
          }
        }
      }
    },
    "ModifyBlockOperationRequest": {
      "type": "object",
      "properties": {
        "paused": {
          "type": "boolean",
          "description": "True if the operation should be paused, false otherwise"
        }
      }
    },
    "Chunk": {
      "type": "object",
      "required": ["link", "loaded", "position", "uuid"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "loaded": {
          "type": "boolean",
          "description": "True if this chunk is currently loaded, false otherwise"
        },
        "position": {
          "description": "The position of this chunk (in chunk coordinates)",
          "$ref": "#/definitions/Vector3i"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The unique id of this chunk"
        },
        "blockMax": {
          "description": "The bock with the largest coordinates that is still part of this chunk",
          "$ref": "#/definitions/Vector3i"
        },
        "blockMin": {
          "description": "The bock with the smallest coordinates that is still part of this chunk",
          "$ref": "#/definitions/Vector3i"
        },
        "inhabitedTime": {
          "type": "integer",
          "format": "int32",
          "description": "The total amount of time (in server ticks) this chunk has been inhabited by players."
        },
        "regionalDifficultyFactor": {
          "type": "number",
          "format": "double",
          "description": "The increase in difficulty due to the presence of players in the chunk"
        },
        "regionalDifficultyPercentage": {
          "type": "number",
          "format": "double",
          "description": "The increase in difficulty due to the presence of players in the chunk as a percentage"
        },
        "world": {
          "description": "The world the chunk is in",
          "$ref": "#/definitions/World"
        }
      }
    },
    "Command": {
      "type": "object",
      "required": ["aliases", "description", "help", "link", "name", "usage"],
      "properties": {
        "aliases": {
          "type": "array",
          "description": "All the aliases that were registered for this command",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "The description provided with the command"
        },
        "help": {
          "type": "string",
          "description": "Extended help information on the usage of the command"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the command, sometimes also referred to as primary alias."
        },
        "usage": {
          "type": "string",
          "description": "A short description of the usage of this command"
        }
      }
    },
    "ExecuteCommandRequest": {
      "type": "object",
      "required": ["command"],
      "properties": {
        "command": {
          "type": "string",
          "description": "The command to execute"
        },
        "hiddenInConsole": {
          "type": "boolean",
          "description": "True to hide the execution of the command in the console, false otherwise"
        },
        "name": {
          "type": "string",
          "description": "The name of the source that executes the command"
        },
        "waitLines": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of text lines to wait for in the response"
        },
        "waitTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time to wait for a response"
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "defaultFractionDigits": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pluralDisplayName": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "Account": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "displayName": {
          "type": "string"
        },
        "friendlyId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "CachedObject": {
      "type": "object",
      "required": ["link"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        }
      }
    },
    "ExecuteMethodResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/CachedObject"
        },
        "result": {
          "type": "object"
        }
      }
    },
    "ExecuteMethodParam": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the parameter",
          "enum": ["INT", "INTEGER", "FLOAT", "DOUBLE", "BOOL", "BOOLEAN", "BYTE", "CHAR", "LONG", "SHORT", "STRING", "CLASS", "ENUM", "VECTOR3D", "VECTOR3I", "TEXT", "WORLD", "PLAYER", "ITEMSTACK", "STATIC"]
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter"
        }
      }
    },
    "ExecuteMethodRequest": {
      "type": "object",
      "required": ["method"],
      "properties": {
        "method": {
          "type": "string",
          "description": "The method that is executed"
        },
        "parameters": {
          "type": "array",
          "description": "The parameters of the method (if applicable)",
          "items": {
            "$ref": "#/definitions/ExecuteMethodParam"
          }
        }
      }
    },
    "Entity": {
      "type": "object",
      "required": ["link", "location", "rotation", "scale", "type", "uuid", "velocity"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "location": {
          "description": "The current location of the entity",
          "$ref": "#/definitions/Location"
        },
        "rotation": {
          "description": "The current rotation of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "scale": {
          "description": "The current scale of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "type": {
          "description": "The type of entity",
          "$ref": "#/definitions/CatalogType"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The unique UUID of the entity"
        },
        "velocity": {
          "description": "The current velocity of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "absorption": {
          "type": "number",
          "format": "double"
        },
        "age": {
          "$ref": "#/definitions/AgeableData"
        },
        "aggressive": {
          "type": "boolean"
        },
        "aiEnabled": {
          "type": "boolean"
        },
        "angerLevel": {
          "type": "integer",
          "format": "int32"
        },
        "armorStand": {
          "$ref": "#/definitions/ArmorStandData"
        },
        "art": {
          "$ref": "#/definitions/CatalogType"
        },
        "attached": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "axis": {
          "type": "string",
          "enum": ["X", "Y", "Z"]
        },
        "banner": {
          "$ref": "#/definitions/BannerData"
        },
        "beacon": {
          "$ref": "#/definitions/BeaconData"
        },
        "bigMushroom": {
          "$ref": "#/definitions/CatalogType"
        },
        "block": {
          "$ref": "#/definitions/BlockState"
        },
        "breathing": {
          "$ref": "#/definitions/BreathingData"
        },
        "breedable": {
          "type": "boolean"
        },
        "brewingStand": {
          "$ref": "#/definitions/BrewingStandData"
        },
        "brick": {
          "$ref": "#/definitions/CatalogType"
        },
        "career": {
          "$ref": "#/definitions/Career"
        },
        "charged": {
          "type": "boolean"
        },
        "coal": {
          "$ref": "#/definitions/CatalogType"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "command": {
          "$ref": "#/definitions/CommandData"
        },
        "comparator": {
          "$ref": "#/definitions/CatalogType"
        },
        "connectedDirection": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
          }
        },
        "cookedFish": {
          "$ref": "#/definitions/CatalogType"
        },
        "cooldown": {
          "type": "integer",
          "format": "int32"
        },
        "criticalHit": {
          "type": "boolean"
        },
        "customName": {
          "type": "boolean"
        },
        "damage": {
          "type": "number",
          "format": "double"
        },
        "damageable": {
          "$ref": "#/definitions/DamageableData"
        },
        "decayable": {
          "type": "boolean"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "despawnDelay": {
          "$ref": "#/definitions/DespawnDelayData"
        },
        "direction": {
          "type": "string",
          "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
        },
        "dirt": {
          "$ref": "#/definitions/CatalogType"
        },
        "disarmed": {
          "type": "boolean"
        },
        "disguisedBlock": {
          "$ref": "#/definitions/CatalogType"
        },
        "displayName": {
          "type": "string"
        },
        "dominantHand": {
          "$ref": "#/definitions/CatalogType"
        },
        "doublePlant": {
          "$ref": "#/definitions/CatalogType"
        },
        "drops": {
          "type": "boolean"
        },
        "durability": {
          "$ref": "#/definitions/DurabilityData"
        },
        "dye": {
          "$ref": "#/definitions/DyeColor"
        },
        "enchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "endGateway": {
          "$ref": "#/definitions/EndGatewayData"
        },
        "expOrb": {
          "type": "integer",
          "format": "int32"
        },
        "experience": {
          "$ref": "#/definitions/ExperienceHolderData"
        },
        "expireTicks": {
          "type": "integer",
          "format": "int32"
        },
        "explosionRadius": {
          "type": "integer",
          "format": "int32"
        },
        "extended": {
          "type": "boolean"
        },
        "fallDistance": {
          "type": "number",
          "format": "float"
        },
        "fallingBlock": {
          "$ref": "#/definitions/FallingBlockData"
        },
        "filled": {
          "type": "boolean"
        },
        "fireworkEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FireworkEffect"
          }
        },
        "fireworkRocket": {
          "$ref": "#/definitions/FireworkRocketData"
        },
        "fish": {
          "$ref": "#/definitions/CatalogType"
        },
        "flammable": {
          "type": "boolean"
        },
        "fluid": {
          "$ref": "#/definitions/FluidStack"
        },
        "fluidLevel": {
          "type": "integer",
          "format": "int32"
        },
        "fluidTanks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FluidStack"
            }
          }
        },
        "flying": {
          "type": "boolean"
        },
        "flyingAbility": {
          "type": "boolean"
        },
        "food": {
          "$ref": "#/definitions/FoodData"
        },
        "furnace": {
          "$ref": "#/definitions/FurnaceData"
        },
        "fuse": {
          "$ref": "#/definitions/FuseData"
        },
        "gameMode": {
          "$ref": "#/definitions/GameMode"
        },
        "generation": {
          "type": "integer",
          "format": "int32"
        },
        "glowing": {
          "type": "boolean"
        },
        "goldenApple": {
          "$ref": "#/definitions/CatalogType"
        },
        "griefs": {
          "type": "boolean"
        },
        "growth": {
          "$ref": "#/definitions/GrowthData"
        },
        "health": {
          "$ref": "#/definitions/HealthData"
        },
        "hide": {
          "$ref": "#/definitions/HideData"
        },
        "hinge": {
          "$ref": "#/definitions/CatalogType"
        },
        "horse": {
          "$ref": "#/definitions/HorseData"
        },
        "igniteable": {
          "$ref": "#/definitions/IgniteableData"
        },
        "inWall": {
          "type": "boolean"
        },
        "invisibility": {
          "$ref": "#/definitions/InvisibilityData"
        },
        "invulnerability": {
          "$ref": "#/definitions/InvulnerabilityData"
        },
        "joined": {
          "$ref": "#/definitions/JoinData"
        },
        "knockback": {
          "type": "integer",
          "format": "int32"
        },
        "layer": {
          "type": "integer",
          "format": "int32"
        },
        "leash": {
          "$ref": "#/definitions/LeashData"
        },
        "lockToken": {
          "type": "string"
        },
        "logAxis": {
          "$ref": "#/definitions/CatalogType"
        },
        "lore": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minecartBlock": {
          "$ref": "#/definitions/MinecartBlockData"
        },
        "mobSpawner": {
          "$ref": "#/definitions/MobSpawnerData"
        },
        "moisture": {
          "type": "integer",
          "format": "int32"
        },
        "note": {
          "$ref": "#/definitions/CatalogType"
        },
        "occupied": {
          "type": "boolean"
        },
        "ocelot": {
          "$ref": "#/definitions/CatalogType"
        },
        "open": {
          "type": "boolean"
        },
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passengers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "persists": {
          "type": "boolean"
        },
        "pickupDelay": {
          "$ref": "#/definitions/PickupDelayData"
        },
        "pickupRule": {
          "$ref": "#/definitions/CatalogType"
        },
        "pigSaddle": {
          "type": "boolean"
        },
        "piston": {
          "$ref": "#/definitions/CatalogType"
        },
        "placeableOn": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CatalogType"
          }
        },
        "plant": {
          "$ref": "#/definitions/CatalogType"
        },
        "playerCreated": {
          "type": "boolean"
        },
        "playing": {
          "type": "boolean"
        },
        "portion": {
          "$ref": "#/definitions/CatalogType"
        },
        "potionEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "powered": {
          "type": "boolean"
        },
        "prismarine": {
          "$ref": "#/definitions/CatalogType"
        },
        "quartz": {
          "$ref": "#/definitions/CatalogType"
        },
        "rabbit": {
          "$ref": "#/definitions/CatalogType"
        },
        "railDirection": {
          "$ref": "#/definitions/CatalogType"
        },
        "redstonePower": {
          "type": "integer",
          "format": "int32"
        },
        "representedItem": {
          "$ref": "#/definitions/ItemStack"
        },
        "representedPlayer": {
          "type": "string"
        },
        "respawnLocations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Location"
          }
        },
        "sand": {
          "$ref": "#/definitions/CatalogType"
        },
        "sandStone": {
          "$ref": "#/definitions/CatalogType"
        },
        "screaming": {
          "type": "boolean"
        },
        "seamless": {
          "type": "boolean"
        },
        "shatters": {
          "type": "boolean"
        },
        "sheared": {
          "type": "boolean"
        },
        "shrub": {
          "$ref": "#/definitions/CatalogType"
        },
        "sign": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silent": {
          "type": "boolean"
        },
        "sitting": {
          "type": "boolean"
        },
        "skin": {
          "type": "string",
          "format": "uuid"
        },
        "skull": {
          "$ref": "#/definitions/CatalogType"
        },
        "slab": {
          "$ref": "#/definitions/CatalogType"
        },
        "sleeping": {
          "type": "boolean"
        },
        "slime": {
          "$ref": "#/definitions/SlimeData"
        },
        "sneaking": {
          "type": "boolean"
        },
        "snow": {
          "type": "boolean"
        },
        "spawn": {
          "$ref": "#/definitions/CatalogType"
        },
        "sprinting": {
          "type": "boolean"
        },
        "stairShape": {
          "$ref": "#/definitions/CatalogType"
        },
        "statistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stat"
          }
        },
        "stone": {
          "$ref": "#/definitions/CatalogType"
        },
        "storedEnchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "structure": {
          "$ref": "#/definitions/StructureData"
        },
        "stuckArrows": {
          "type": "integer",
          "format": "int32"
        },
        "tamed": {
          "$ref": "#/definitions/TameableData"
        },
        "target": {
          "$ref": "#/definitions/Vector3d"
        },
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TradeOffer"
          }
        },
        "tree": {
          "$ref": "#/definitions/CatalogType"
        },
        "vehicle": {
          "$ref": "#/definitions/VehicleData"
        },
        "wall": {
          "$ref": "#/definitions/CatalogType"
        },
        "wet": {
          "type": "boolean"
        },
        "wires": {
          "$ref": "#/definitions/WireAttachmentData"
        },
        "acceptsItems": {
          "$ref": "#/definitions/AcceptsItems"
        },
        "applicableEffect": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "armorSlotType": {
          "$ref": "#/definitions/ArmorSlotType"
        },
        "armorType": {
          "$ref": "#/definitions/CatalogType"
        },
        "blastResistance": {
          "type": "number",
          "format": "double"
        },
        "burningFuel": {
          "type": "integer",
          "format": "int32"
        },
        "damageAbsorption": {
          "type": "integer",
          "format": "int32"
        },
        "efficiency": {
          "type": "number",
          "format": "double"
        },
        "equipmentType": {
          "$ref": "#/definitions/CatalogType"
        },
        "equiptmentSlotType": {
          "$ref": "#/definitions/EquipmentSlotType"
        },
        "eyeHeight": {
          "type": "number",
          "format": "double"
        },
        "eyeLocation": {
          "$ref": "#/definitions/Vector3d"
        },
        "fluidTemperature": {
          "type": "integer",
          "format": "int32"
        },
        "fluidViscosity": {
          "type": "integer",
          "format": "int32"
        },
        "foodRestoration": {
          "type": "integer",
          "format": "int32"
        },
        "fullBlockSelectionBox": {
          "type": "boolean"
        },
        "gravityAffected": {
          "type": "boolean"
        },
        "groundLuminance": {
          "type": "number",
          "format": "double"
        },
        "guiId": {
          "$ref": "#/definitions/GuiIdProperty"
        },
        "hardness": {
          "type": "number",
          "format": "double"
        },
        "heldItem": {
          "$ref": "#/definitions/CatalogType"
        },
        "identifiable": {
          "$ref": "#/definitions/Identifiable"
        },
        "indirectlyPowered": {
          "type": "boolean"
        },
        "instrument": {
          "$ref": "#/definitions/CatalogType"
        },
        "inventoryCapacity": {
          "$ref": "#/definitions/InventoryCapacity"
        },
        "inventoryDimension": {
          "$ref": "#/definitions/InventoryDimension"
        },
        "inventoryTitle": {
          "$ref": "#/definitions/InventoryTitle"
        },
        "lightEmission": {
          "type": "integer",
          "format": "int32"
        },
        "matter": {
          "type": "string",
          "enum": ["SOLID", "LIQUID", "GAS"]
        },
        "passable": {
          "type": "boolean"
        },
        "record": {
          "$ref": "#/definitions/CatalogType"
        },
        "replaceable": {
          "type": "boolean"
        },
        "saturationProperty": {
          "type": "number",
          "format": "double"
        },
        "skyLuminance": {
          "type": "number",
          "format": "double"
        },
        "slotIndex": {
          "$ref": "#/definitions/SlotIndex"
        },
        "slotPos": {
          "$ref": "#/definitions/SlotPos"
        },
        "slotSide": {
          "$ref": "#/definitions/SlotSide"
        },
        "smeltable": {
          "type": "boolean"
        },
        "solidCube": {
          "type": "boolean"
        },
        "statisticsTracked": {
          "type": "boolean"
        },
        "surrogateBlock": {
          "type": "boolean"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "toolType": {
          "$ref": "#/definitions/CatalogType"
        },
        "unbreakable": {
          "type": "boolean"
        },
        "useLimit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DamageRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of damage that should be dealt to the entity"
        },
        "type": {
          "type": "string",
          "description": "The type of damage that should be dealt"
        }
      }
    },
    "UpdateEntityRequest": {
      "type": "object",
      "properties": {
        "damage": {
          "description": "The damage the entity will take",
          "$ref": "#/definitions/DamageRequest"
        },
        "inventory": {
          "type": "array",
          "description": "The ItemStacks in the inventory of the entity",
          "items": {
            "$ref": "#/definitions/ItemStack"
          }
        },
        "position": {
          "description": "The position that the entity will be moved to",
          "$ref": "#/definitions/Vector3d"
        },
        "rotation": {
          "description": "The new rotation of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "scale": {
          "description": "The new scale of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "velocity": {
          "description": "The new speed of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "world": {
          "type": "string",
          "description": "The world that the entity will be moved to"
        }
      }
    },
    "CreateEntityRequest": {
      "type": "object",
      "required": ["position", "type", "world"],
      "properties": {
        "position": {
          "description": "The position where the entity is spawned",
          "$ref": "#/definitions/Vector3d"
        },
        "type": {
          "type": "string",
          "description": "The type of entity that will be spawned"
        },
        "world": {
          "type": "string",
          "description": "The world that the entity will be spawned in"
        }
      }
    },
    "ChatMessage": {
      "allOf": [{
        "$ref": "#/definitions/Message"
      }, {
        "type": "object",
        "required": ["sender"],
        "properties": {
          "sender": {
            "description": "The sender of the message",
            "$ref": "#/definitions/Player"
          }
        }
      }]
    },
    "Message": {
      "type": "object",
      "required": ["content", "link", "receivers", "timestamp"],
      "properties": {
        "content": {
          "type": "string",
          "description": "The content of the message"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "receivers": {
          "type": "array",
          "description": "The receivers of this message",
          "items": {
            "type": "object"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp at which the chat message was sent"
        }
      }
    },
    "Cause": {
      "type": "object",
      "required": ["causes", "context", "link"],
      "properties": {
        "causes": {
          "type": "array",
          "description": "The direct sources of this cause",
          "items": {
            "type": "object"
          }
        },
        "context": {
          "type": "object",
          "description": "The context surrounding the cause",
          "additionalProperties": {
            "type": "object"
          }
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        }
      }
    },
    "CommandCall": {
      "type": "object",
      "required": ["args", "cancelled", "cause", "command", "link", "result", "timestamp"],
      "properties": {
        "args": {
          "type": "string",
          "description": "The arguments that were passed to the command"
        },
        "cancelled": {
          "type": "boolean",
          "description": "True if the command was cancelled, false otherwise"
        },
        "cause": {
          "description": "The cause of the command execution",
          "$ref": "#/definitions/Cause"
        },
        "command": {
          "type": "string",
          "description": "The command that was executed (without arguments)"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "result": {
          "description": "The result of the command execution",
          "$ref": "#/definitions/CommandResult"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp at which the command was executed"
        }
      }
    },
    "CommandResult": {
      "type": "object",
      "required": ["link"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "affectedBlocks": {
          "type": "integer",
          "format": "int32",
          "description": "The number of blocks that were affected by this command"
        },
        "affectedEntities": {
          "type": "integer",
          "format": "int32",
          "description": "The number of entities that were affected by this command"
        },
        "affectedItems": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items that were affected by this command"
        },
        "queryResult": {
          "type": "integer",
          "format": "int32",
          "description": "The results of the query"
        },
        "successCount": {
          "type": "integer",
          "format": "int32",
          "description": "The success count"
        }
      }
    },
    "ServerStat": {
      "type": "object",
      "required": ["timestamp", "value"],
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The epoch timestamp (in seconds) when the statistic was recorded"
        },
        "value": {
          "type": "number",
          "description": "The value that was recorded"
        }
      }
    },
    "ServerStatDouble": {
      "type": "object",
      "required": ["timestamp", "value"],
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The epoch timestamp (in seconds) when the statistic was recorded"
        },
        "value": {
          "type": "number",
          "description": "The value that was recorded"
        }
      }
    },
    "ServerStatInteger": {
      "type": "object",
      "required": ["timestamp", "value"],
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The epoch timestamp (in seconds) when the statistic was recorded"
        },
        "value": {
          "type": "number",
          "description": "The value that was recorded"
        }
      }
    },
    "ServerStats": {
      "type": "object",
      "required": ["cpu", "disk", "memory", "players", "tps"],
      "properties": {
        "cpu": {
          "type": "array",
          "description": "Historic values for the cpu load",
          "items": {
            "$ref": "#/definitions/ServerStatDouble"
          }
        },
        "disk": {
          "type": "array",
          "description": "Historic values for the disk usage",
          "items": {
            "$ref": "#/definitions/ServerStatDouble"
          }
        },
        "memory": {
          "type": "array",
          "description": "Historic values for the memory load",
          "items": {
            "$ref": "#/definitions/ServerStatDouble"
          }
        },
        "players": {
          "type": "array",
          "description": "Historic values for the number of online players",
          "items": {
            "$ref": "#/definitions/ServerStatInteger"
          }
        },
        "tps": {
          "type": "array",
          "description": "Historic values for the average ticks per second",
          "items": {
            "$ref": "#/definitions/ServerStatDouble"
          }
        }
      }
    },
    "PluginContainer": {
      "type": "object",
      "required": ["authors", "dependencies", "id", "link", "name"],
      "properties": {
        "authors": {
          "type": "array",
          "description": "A list of authors that created this plugin",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "type": "array",
          "description": "Other plugins that this plugin depends on",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PluginDependency"
          }
        },
        "id": {
          "type": "string",
          "description": "The unique id of this plugin"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of this plugin"
        },
        "description": {
          "type": "string",
          "description": "A description describing what this plugin does (hopefully)"
        },
        "url": {
          "type": "string",
          "description": "The url that was added to the plugin (probably the homepage)"
        },
        "version": {
          "type": "string",
          "description": "The current version of the plugin"
        }
      }
    },
    "PluginDependency": {
      "type": "object",
      "required": ["id", "link", "loadOrder", "optional", "version"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the plugin that the original plugin depends on"
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "loadOrder": {
          "type": "string",
          "description": "The load order of the original plugin in relation to the dependency",
          "enum": ["NONE", "BEFORE", "AFTER"]
        },
        "optional": {
          "type": "boolean",
          "description": "True if this is an optional dependency, false otherwise"
        },
        "version": {
          "type": "string",
          "description": "The version of the plugin that the original plugin depends on"
        }
      }
    },
    "ServerInfo": {
      "type": "object",
      "required": ["api", "game", "hasWhitelist", "implementation", "maxPlayers", "minecraftVersion", "motd", "onlineMode", "players", "tps", "uptimeTicks"],
      "properties": {
        "api": {
          "$ref": "#/definitions/PluginContainer"
        },
        "game": {
          "$ref": "#/definitions/PluginContainer"
        },
        "hasWhitelist": {
          "type": "boolean",
          "description": "True if the server has activated the whitelist, false otherwise"
        },
        "implementation": {
          "$ref": "#/definitions/PluginContainer"
        },
        "maxPlayers": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum amount of players allowed on the server"
        },
        "minecraftVersion": {
          "type": "string",
          "description": "The Minecraft version running on the server"
        },
        "motd": {
          "type": "string",
          "description": "The message of the day set on the server"
        },
        "onlineMode": {
          "type": "boolean",
          "description": "True if the server is in online mode and verifies connections, false otherwise"
        },
        "players": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of players currently playing on the server"
        },
        "tps": {
          "type": "number",
          "format": "double",
          "description": "The average ticks per second the server is running with"
        },
        "uptimeTicks": {
          "type": "integer",
          "format": "int32",
          "description": "The number of ticks the server has been running"
        },
        "address": {
          "type": "string",
          "description": "The address that the server is bound to"
        },
        "resourcePack": {
          "type": "string",
          "description": "The name of the resource pack this is used on the server"
        }
      }
    },
    "InteractiveMessage": {
      "type": "object",
      "required": ["id", "link", "target", "uuid"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the message. Used for sender of the message to identify responses."
        },
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The target of the message, usually this is a player UUID. Can be set to \"server\" to send to all online players."
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The unique UUID of this message"
        },
        "message": {
          "type": "string",
          "description": "The actual content of the message"
        },
        "once": {
          "type": "boolean",
          "description": "True if this message can only be replied to once per target, false otherwise"
        },
        "options": {
          "type": "array",
          "description": "Clickable options that the player can select from",
          "items": {
            "$ref": "#/definitions/InteractiveMessageOption"
          }
        },
        "targets": {
          "type": "array",
          "description": "A list of targets that will receive the message. Usually a list of player UUIDs",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InteractiveMessageOption": {
      "type": "object",
      "required": ["key", "value"],
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the option (this is sent to the webhook)"
        },
        "value": {
          "type": "string",
          "description": "The value of the option (this is displayed to the player)"
        }
      }
    },
    "SubjectCollection": {
      "type": "object",
      "required": ["id", "loadedSubjectCount"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of this subject collection"
        },
        "loadedSubjectCount": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of subjects currently loaded from this collection"
        }
      }
    },
    "Subject": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of this subject"
        },
        "friendlyId": {
          "type": "string",
          "description": "The friendly id of this subject (often a 'name'"
        },
        "permissions": {
          "type": "object",
          "description": "The permissions that are assigned to this subject",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "UpdatePlayerRequest": {
      "type": "object",
      "properties": {
        "damage": {
          "description": "The damage the entity will take",
          "$ref": "#/definitions/DamageRequest"
        },
        "exhaustion": {
          "type": "number",
          "format": "double",
          "description": "The exhaustion of the player"
        },
        "experienceSinceLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of experience gained since the last level"
        },
        "foodLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The food level of the player"
        },
        "health": {
          "type": "number",
          "format": "double",
          "description": "The current amount of health the player has"
        },
        "inventory": {
          "type": "array",
          "description": "The ItemStacks in the inventory of the entity",
          "items": {
            "$ref": "#/definitions/ItemStack"
          }
        },
        "level": {
          "type": "integer",
          "format": "int32",
          "description": "The player level"
        },
        "maxHealth": {
          "type": "number",
          "format": "double",
          "description": "The maximum health of the player"
        },
        "position": {
          "description": "The position that the entity will be moved to",
          "$ref": "#/definitions/Vector3d"
        },
        "rotation": {
          "description": "The new rotation of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "saturation": {
          "type": "number",
          "format": "double",
          "description": "The saturation of the player"
        },
        "scale": {
          "description": "The new scale of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "totalExperience": {
          "type": "integer",
          "format": "int32",
          "description": "The total experience of the player"
        },
        "velocity": {
          "description": "The new speed of the entity",
          "$ref": "#/definitions/Vector3d"
        },
        "world": {
          "type": "string",
          "description": "The world that the entity will be moved to"
        }
      }
    },
    "ServerProperty": {
      "type": "object",
      "required": ["key", "value"],
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the server property"
        },
        "value": {
          "type": "string",
          "description": "The value of the server property"
        }
      }
    },
    "TileEntity": {
      "type": "object",
      "required": ["link", "location", "type"],
      "properties": {
        "link": {
          "type": "string",
          "description": "The API link that can be used to obtain more information about this object",
          "readOnly": true
        },
        "location": {
          "description": "The location of this tile entity",
          "$ref": "#/definitions/Location"
        },
        "type": {
          "description": "The type of this tile entity",
          "$ref": "#/definitions/CatalogType"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "absorption": {
          "type": "number",
          "format": "double"
        },
        "age": {
          "$ref": "#/definitions/AgeableData"
        },
        "aggressive": {
          "type": "boolean"
        },
        "aiEnabled": {
          "type": "boolean"
        },
        "angerLevel": {
          "type": "integer",
          "format": "int32"
        },
        "armorStand": {
          "$ref": "#/definitions/ArmorStandData"
        },
        "art": {
          "$ref": "#/definitions/CatalogType"
        },
        "attached": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "axis": {
          "type": "string",
          "enum": ["X", "Y", "Z"]
        },
        "banner": {
          "$ref": "#/definitions/BannerData"
        },
        "beacon": {
          "$ref": "#/definitions/BeaconData"
        },
        "bigMushroom": {
          "$ref": "#/definitions/CatalogType"
        },
        "block": {
          "$ref": "#/definitions/BlockState"
        },
        "breathing": {
          "$ref": "#/definitions/BreathingData"
        },
        "breedable": {
          "type": "boolean"
        },
        "brewingStand": {
          "$ref": "#/definitions/BrewingStandData"
        },
        "brick": {
          "$ref": "#/definitions/CatalogType"
        },
        "career": {
          "$ref": "#/definitions/Career"
        },
        "charged": {
          "type": "boolean"
        },
        "coal": {
          "$ref": "#/definitions/CatalogType"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "command": {
          "$ref": "#/definitions/CommandData"
        },
        "comparator": {
          "$ref": "#/definitions/CatalogType"
        },
        "connectedDirection": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
          }
        },
        "cookedFish": {
          "$ref": "#/definitions/CatalogType"
        },
        "cooldown": {
          "type": "integer",
          "format": "int32"
        },
        "criticalHit": {
          "type": "boolean"
        },
        "customName": {
          "type": "boolean"
        },
        "damage": {
          "type": "number",
          "format": "double"
        },
        "damageable": {
          "$ref": "#/definitions/DamageableData"
        },
        "decayable": {
          "type": "boolean"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "despawnDelay": {
          "$ref": "#/definitions/DespawnDelayData"
        },
        "direction": {
          "type": "string",
          "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
        },
        "dirt": {
          "$ref": "#/definitions/CatalogType"
        },
        "disarmed": {
          "type": "boolean"
        },
        "disguisedBlock": {
          "$ref": "#/definitions/CatalogType"
        },
        "displayName": {
          "type": "string"
        },
        "dominantHand": {
          "$ref": "#/definitions/CatalogType"
        },
        "doublePlant": {
          "$ref": "#/definitions/CatalogType"
        },
        "drops": {
          "type": "boolean"
        },
        "durability": {
          "$ref": "#/definitions/DurabilityData"
        },
        "dye": {
          "$ref": "#/definitions/DyeColor"
        },
        "enchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "endGateway": {
          "$ref": "#/definitions/EndGatewayData"
        },
        "expOrb": {
          "type": "integer",
          "format": "int32"
        },
        "experience": {
          "$ref": "#/definitions/ExperienceHolderData"
        },
        "expireTicks": {
          "type": "integer",
          "format": "int32"
        },
        "explosionRadius": {
          "type": "integer",
          "format": "int32"
        },
        "extended": {
          "type": "boolean"
        },
        "fallDistance": {
          "type": "number",
          "format": "float"
        },
        "fallingBlock": {
          "$ref": "#/definitions/FallingBlockData"
        },
        "filled": {
          "type": "boolean"
        },
        "fireworkEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FireworkEffect"
          }
        },
        "fireworkRocket": {
          "$ref": "#/definitions/FireworkRocketData"
        },
        "fish": {
          "$ref": "#/definitions/CatalogType"
        },
        "flammable": {
          "type": "boolean"
        },
        "fluid": {
          "$ref": "#/definitions/FluidStack"
        },
        "fluidLevel": {
          "type": "integer",
          "format": "int32"
        },
        "fluidTanks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FluidStack"
            }
          }
        },
        "flying": {
          "type": "boolean"
        },
        "flyingAbility": {
          "type": "boolean"
        },
        "food": {
          "$ref": "#/definitions/FoodData"
        },
        "furnace": {
          "$ref": "#/definitions/FurnaceData"
        },
        "fuse": {
          "$ref": "#/definitions/FuseData"
        },
        "gameMode": {
          "$ref": "#/definitions/GameMode"
        },
        "generation": {
          "type": "integer",
          "format": "int32"
        },
        "glowing": {
          "type": "boolean"
        },
        "goldenApple": {
          "$ref": "#/definitions/CatalogType"
        },
        "griefs": {
          "type": "boolean"
        },
        "growth": {
          "$ref": "#/definitions/GrowthData"
        },
        "health": {
          "$ref": "#/definitions/HealthData"
        },
        "hide": {
          "$ref": "#/definitions/HideData"
        },
        "hinge": {
          "$ref": "#/definitions/CatalogType"
        },
        "horse": {
          "$ref": "#/definitions/HorseData"
        },
        "igniteable": {
          "$ref": "#/definitions/IgniteableData"
        },
        "inWall": {
          "type": "boolean"
        },
        "invisibility": {
          "$ref": "#/definitions/InvisibilityData"
        },
        "invulnerability": {
          "$ref": "#/definitions/InvulnerabilityData"
        },
        "joined": {
          "$ref": "#/definitions/JoinData"
        },
        "knockback": {
          "type": "integer",
          "format": "int32"
        },
        "layer": {
          "type": "integer",
          "format": "int32"
        },
        "leash": {
          "$ref": "#/definitions/LeashData"
        },
        "lockToken": {
          "type": "string"
        },
        "logAxis": {
          "$ref": "#/definitions/CatalogType"
        },
        "lore": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minecartBlock": {
          "$ref": "#/definitions/MinecartBlockData"
        },
        "mobSpawner": {
          "$ref": "#/definitions/MobSpawnerData"
        },
        "moisture": {
          "type": "integer",
          "format": "int32"
        },
        "note": {
          "$ref": "#/definitions/CatalogType"
        },
        "occupied": {
          "type": "boolean"
        },
        "ocelot": {
          "$ref": "#/definitions/CatalogType"
        },
        "open": {
          "type": "boolean"
        },
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passengers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "persists": {
          "type": "boolean"
        },
        "pickupDelay": {
          "$ref": "#/definitions/PickupDelayData"
        },
        "pickupRule": {
          "$ref": "#/definitions/CatalogType"
        },
        "pigSaddle": {
          "type": "boolean"
        },
        "piston": {
          "$ref": "#/definitions/CatalogType"
        },
        "placeableOn": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CatalogType"
          }
        },
        "plant": {
          "$ref": "#/definitions/CatalogType"
        },
        "playerCreated": {
          "type": "boolean"
        },
        "playing": {
          "type": "boolean"
        },
        "portion": {
          "$ref": "#/definitions/CatalogType"
        },
        "potionEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "powered": {
          "type": "boolean"
        },
        "prismarine": {
          "$ref": "#/definitions/CatalogType"
        },
        "quartz": {
          "$ref": "#/definitions/CatalogType"
        },
        "rabbit": {
          "$ref": "#/definitions/CatalogType"
        },
        "railDirection": {
          "$ref": "#/definitions/CatalogType"
        },
        "redstonePower": {
          "type": "integer",
          "format": "int32"
        },
        "representedItem": {
          "$ref": "#/definitions/ItemStack"
        },
        "representedPlayer": {
          "type": "string"
        },
        "respawnLocations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Location"
          }
        },
        "sand": {
          "$ref": "#/definitions/CatalogType"
        },
        "sandStone": {
          "$ref": "#/definitions/CatalogType"
        },
        "screaming": {
          "type": "boolean"
        },
        "seamless": {
          "type": "boolean"
        },
        "shatters": {
          "type": "boolean"
        },
        "sheared": {
          "type": "boolean"
        },
        "shrub": {
          "$ref": "#/definitions/CatalogType"
        },
        "sign": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silent": {
          "type": "boolean"
        },
        "sitting": {
          "type": "boolean"
        },
        "skin": {
          "type": "string",
          "format": "uuid"
        },
        "skull": {
          "$ref": "#/definitions/CatalogType"
        },
        "slab": {
          "$ref": "#/definitions/CatalogType"
        },
        "sleeping": {
          "type": "boolean"
        },
        "slime": {
          "$ref": "#/definitions/SlimeData"
        },
        "sneaking": {
          "type": "boolean"
        },
        "snow": {
          "type": "boolean"
        },
        "spawn": {
          "$ref": "#/definitions/CatalogType"
        },
        "sprinting": {
          "type": "boolean"
        },
        "stairShape": {
          "$ref": "#/definitions/CatalogType"
        },
        "statistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stat"
          }
        },
        "stone": {
          "$ref": "#/definitions/CatalogType"
        },
        "storedEnchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "structure": {
          "$ref": "#/definitions/StructureData"
        },
        "stuckArrows": {
          "type": "integer",
          "format": "int32"
        },
        "tamed": {
          "$ref": "#/definitions/TameableData"
        },
        "target": {
          "$ref": "#/definitions/Vector3d"
        },
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TradeOffer"
          }
        },
        "tree": {
          "$ref": "#/definitions/CatalogType"
        },
        "vehicle": {
          "$ref": "#/definitions/VehicleData"
        },
        "wall": {
          "$ref": "#/definitions/CatalogType"
        },
        "wet": {
          "type": "boolean"
        },
        "wires": {
          "$ref": "#/definitions/WireAttachmentData"
        },
        "acceptsItems": {
          "$ref": "#/definitions/AcceptsItems"
        },
        "applicableEffect": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "armorSlotType": {
          "$ref": "#/definitions/ArmorSlotType"
        },
        "armorType": {
          "$ref": "#/definitions/CatalogType"
        },
        "blastResistance": {
          "type": "number",
          "format": "double"
        },
        "burningFuel": {
          "type": "integer",
          "format": "int32"
        },
        "damageAbsorption": {
          "type": "integer",
          "format": "int32"
        },
        "efficiency": {
          "type": "number",
          "format": "double"
        },
        "equipmentType": {
          "$ref": "#/definitions/CatalogType"
        },
        "equiptmentSlotType": {
          "$ref": "#/definitions/EquipmentSlotType"
        },
        "eyeHeight": {
          "type": "number",
          "format": "double"
        },
        "eyeLocation": {
          "$ref": "#/definitions/Vector3d"
        },
        "fluidTemperature": {
          "type": "integer",
          "format": "int32"
        },
        "fluidViscosity": {
          "type": "integer",
          "format": "int32"
        },
        "foodRestoration": {
          "type": "integer",
          "format": "int32"
        },
        "fullBlockSelectionBox": {
          "type": "boolean"
        },
        "gravityAffected": {
          "type": "boolean"
        },
        "groundLuminance": {
          "type": "number",
          "format": "double"
        },
        "guiId": {
          "$ref": "#/definitions/GuiIdProperty"
        },
        "hardness": {
          "type": "number",
          "format": "double"
        },
        "heldItem": {
          "$ref": "#/definitions/CatalogType"
        },
        "identifiable": {
          "$ref": "#/definitions/Identifiable"
        },
        "indirectlyPowered": {
          "type": "boolean"
        },
        "instrument": {
          "$ref": "#/definitions/CatalogType"
        },
        "inventoryCapacity": {
          "$ref": "#/definitions/InventoryCapacity"
        },
        "inventoryDimension": {
          "$ref": "#/definitions/InventoryDimension"
        },
        "inventoryTitle": {
          "$ref": "#/definitions/InventoryTitle"
        },
        "lightEmission": {
          "type": "integer",
          "format": "int32"
        },
        "matter": {
          "type": "string",
          "enum": ["SOLID", "LIQUID", "GAS"]
        },
        "passable": {
          "type": "boolean"
        },
        "record": {
          "$ref": "#/definitions/CatalogType"
        },
        "replaceable": {
          "type": "boolean"
        },
        "saturationProperty": {
          "type": "number",
          "format": "double"
        },
        "skyLuminance": {
          "type": "number",
          "format": "double"
        },
        "slotIndex": {
          "$ref": "#/definitions/SlotIndex"
        },
        "slotPos": {
          "$ref": "#/definitions/SlotPos"
        },
        "slotSide": {
          "$ref": "#/definitions/SlotSide"
        },
        "smeltable": {
          "type": "boolean"
        },
        "solidCube": {
          "type": "boolean"
        },
        "statisticsTracked": {
          "type": "boolean"
        },
        "surrogateBlock": {
          "type": "boolean"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "toolType": {
          "$ref": "#/definitions/CatalogType"
        },
        "unbreakable": {
          "type": "boolean"
        },
        "useLimit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PermissionStruct": {
      "type": "object",
      "required": ["key", "name", "permissions", "rateLimit"],
      "properties": {
        "key": {
          "type": "string",
          "description": "The key used authorize with the Web-API"
        },
        "name": {
          "type": "string",
          "description": "The human readable name of this permssions struct. Only useful for users."
        },
        "permissions": {
          "type": "object",
          "description": "The permissions tree that this key grants access to"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "description": "The rate limit in requests per second that this key permits (0 = unlimited)"
        }
      },
      "description": "Represents a permissions struct that contains information to access the Web-API"
    },
    "AuthenticationRequest": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "password": {
          "type": "string",
          "description": "The password of the user"
        },
        "username": {
          "type": "string",
          "description": "The username of the user"
        }
      }
    },
    "CreateWorldRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the world"
        },
        "allowCommands": {
          "type": "boolean"
        },
        "difficulty": {
          "description": "Which difficulty the world is set to",
          "$ref": "#/definitions/CatalogType"
        },
        "dimension": {
          "type": "string",
          "description": "The the dimension that this world belongs to"
        },
        "gameMode": {
          "description": "Which game mode the world defaults to",
          "$ref": "#/definitions/GameMode"
        },
        "generator": {
          "description": "Which generator to use for the world",
          "$ref": "#/definitions/CatalogType"
        },
        "keepSpawnLoaded": {
          "type": "boolean"
        },
        "loadOnStartup": {
          "type": "boolean"
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "description": "The seed of the world"
        },
        "usesMapFeatures": {
          "type": "boolean"
        }
      }
    },
    "GameMode": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of the game mode"
        },
        "name": {
          "type": "string",
          "description": "The name of the game mode"
        }
      }
    },
    "UpdateWorldRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the world"
        },
        "allowCommands": {
          "type": "boolean"
        },
        "difficulty": {
          "description": "Which difficulty the world is set to",
          "$ref": "#/definitions/CatalogType"
        },
        "gameMode": {
          "description": "Which game mode the world defaults to",
          "$ref": "#/definitions/GameMode"
        },
        "gameRules": {
          "type": "object",
          "description": "The game rule settings of this world",
          "additionalProperties": {
            "type": "string"
          }
        },
        "generator": {
          "description": "Which generator to use for the world",
          "$ref": "#/definitions/CatalogType"
        },
        "keepSpawnLoaded": {
          "type": "boolean"
        },
        "loadOnStartup": {
          "type": "boolean"
        },
        "loaded": {
          "type": "boolean",
          "description": "True if the world should be loaded, false otherwise"
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "description": "The seed of the world"
        },
        "usesMapFeatures": {
          "type": "boolean"
        }
      }
    },
    "AgeableData": {
      "type": "object",
      "required": ["adult", "age"],
      "properties": {
        "adult": {
          "type": "boolean",
          "description": "True if this entity is an adult, false otherwise"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The age of the entity"
        }
      }
    },
    "ArmorStandData": {
      "type": "object",
      "required": ["arms", "basePlate", "marker", "small"],
      "properties": {
        "arms": {
          "type": "boolean",
          "description": "True if the armor stand has arms, false otherwise"
        },
        "basePlate": {
          "type": "boolean",
          "description": "True if the armor stand has a base plate, false otherwise"
        },
        "marker": {
          "type": "boolean",
          "description": "True if the armor stand has a marker, false otherwise"
        },
        "small": {
          "type": "boolean",
          "description": "True if the armor stand is small, false otherwise"
        }
      }
    },
    "BannerData": {
      "type": "object",
      "required": ["color", "patterns"],
      "properties": {
        "color": {
          "description": "The color of the banner",
          "$ref": "#/definitions/DyeColor"
        },
        "patterns": {
          "type": "array",
          "description": "The patterns on the banner",
          "items": {
            "$ref": "#/definitions/PatternLayer"
          }
        }
      }
    },
    "Color": {
      "type": "object",
      "required": ["b", "g", "r"],
      "properties": {
        "r": {
          "type": "integer",
          "format": "int32",
          "description": "The red value of the color"
        },
        "g": {
          "type": "integer",
          "format": "int32",
          "description": "The green value of the color"
        },
        "b": {
          "type": "integer",
          "format": "int32",
          "description": "The blue value of the color"
        }
      }
    },
    "DyeColor": {
      "type": "object",
      "required": ["color", "id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of this dye color"
        },
        "name": {
          "type": "string",
          "description": "The name of this dye color"
        },
        "color": {
          "description": "The color represented by this dye color",
          "$ref": "#/definitions/Color"
        }
      }
    },
    "PatternLayer": {
      "type": "object",
      "required": ["color", "shape"],
      "properties": {
        "shape": {
          "description": "The base shape of this pattern",
          "$ref": "#/definitions/CatalogType"
        },
        "color": {
          "description": "The color of the pattern",
          "$ref": "#/definitions/DyeColor"
        }
      }
    },
    "BeaconData": {
      "type": "object",
      "properties": {
        "primary": {
          "description": "The primary effect of the beacon",
          "$ref": "#/definitions/CatalogType"
        },
        "secondary": {
          "description": "The secondary effect of the beacon",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "BreathingData": {
      "type": "object",
      "required": ["max", "remaining"],
      "properties": {
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum amount of air available to this entity"
        },
        "remaining": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of air currently remaining"
        }
      }
    },
    "BrewingStandData": {
      "type": "object",
      "required": ["remainingBrewTime"],
      "properties": {
        "remainingBrewTime": {
          "type": "integer",
          "format": "int32",
          "description": "The time remaining until brewing is complete"
        }
      }
    },
    "Career": {
      "type": "object",
      "required": ["id", "name", "profession"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of the career"
        },
        "name": {
          "type": "string",
          "description": "The name of the career"
        },
        "profession": {
          "description": "The profession within the career",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "CommandData": {
      "type": "object",
      "required": ["storedCommand", "successCount", "tracksOutput"],
      "properties": {
        "tracksOutput": {
          "type": "boolean",
          "description": "True if the output is tracked, false otherwise"
        },
        "lastOutput": {
          "type": "string",
          "description": "The last output produced"
        },
        "storedCommand": {
          "type": "string",
          "description": "The stored command"
        },
        "successCount": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of successfull executions"
        }
      }
    },
    "DamageableData": {
      "type": "object",
      "properties": {
        "lastAttacker": {
          "description": "The entity which last attacked this entity",
          "$ref": "#/definitions/EntitySnapshot"
        },
        "lastDamage": {
          "type": "number",
          "format": "double",
          "description": "The amount of damage inflicted by the last attacker"
        }
      }
    },
    "EntitySnapshot": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The uuid of the entity"
        },
        "type": {
          "description": "The type of the entity",
          "$ref": "#/definitions/CatalogType"
        },
        "transform": {
          "description": "The transform of the entity",
          "$ref": "#/definitions/Transform"
        }
      }
    },
    "Transform": {
      "type": "object",
      "required": ["position", "rotation", "scale", "world"],
      "properties": {
        "world": {
          "description": "The world of this transform",
          "$ref": "#/definitions/World"
        },
        "position": {
          "description": "The position within the world",
          "$ref": "#/definitions/Vector3d"
        },
        "rotation": {
          "description": "The rotation of the object",
          "$ref": "#/definitions/Vector3d"
        },
        "scale": {
          "description": "The scale of the object",
          "$ref": "#/definitions/Vector3d"
        }
      }
    },
    "DespawnDelayData": {
      "type": "object",
      "required": ["delay", "infinite"],
      "properties": {
        "delay": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time until this entity despawns"
        },
        "infinite": {
          "type": "boolean",
          "description": "True if this entity never despawns, false otherwise"
        }
      }
    },
    "DurabilityData": {
      "type": "object",
      "required": ["durability", "unbreakable"],
      "properties": {
        "unbreakable": {
          "type": "boolean",
          "description": "True if this entity is unbreakable, false otherwise"
        },
        "durability": {
          "type": "integer",
          "format": "int32",
          "description": "The remaining durability of this entity"
        }
      }
    },
    "Enchantment": {
      "type": "object",
      "properties": {
        "level": {
          "type": "integer",
          "format": "int32",
          "description": "The level of the enchantment"
        },
        "name": {
          "type": "string",
          "description": "The name of the enchantment type"
        },
        "id": {
          "type": "string",
          "description": "The unique id of the enchantment type"
        }
      }
    },
    "EndGatewayData": {
      "type": "object",
      "required": ["age", "exactTeleport", "exitPosition", "teleportCooldown"],
      "properties": {
        "age": {
          "type": "integer",
          "format": "int64",
          "description": "The age of this gateway"
        },
        "exactTeleport": {
          "type": "boolean",
          "description": "True if this is an exact teleport, false otherwise"
        },
        "exitPosition": {
          "description": "The exit position in the nether",
          "$ref": "#/definitions/Vector3i"
        },
        "teleportCooldown": {
          "type": "integer",
          "format": "int32",
          "description": "The cooldown of the teleport"
        }
      }
    },
    "ExperienceHolderData": {
      "type": "object",
      "properties": {
        "level": {
          "type": "integer",
          "format": "int32",
          "description": "The current level of the entity"
        },
        "experience": {
          "type": "integer",
          "format": "int32",
          "description": "The experience gained since the last level"
        },
        "totalExperience": {
          "type": "integer",
          "format": "int32",
          "description": "The total amount of experience collected"
        }
      }
    },
    "FallingBlockData": {
      "type": "object",
      "required": ["canDropAsItem", "canHurtEntities", "canPlaceAsBlock", "fallDamagePerBlock", "fallTime", "maxFallDamage", "state"],
      "properties": {
        "state": {
          "description": "The state of the falling block",
          "$ref": "#/definitions/BlockState"
        },
        "canDropAsItem": {
          "type": "boolean",
          "description": "True if the block can drop as an item, false otherwise"
        },
        "canHurtEntities": {
          "type": "boolean",
          "description": "True if the block can hurt entities, false otherwise"
        },
        "canPlaceAsBlock": {
          "type": "boolean",
          "description": "True if this falling block can be placed as a normal block, false otherwise"
        },
        "fallDamagePerBlock": {
          "type": "number",
          "format": "double",
          "description": "The amount of damage per block this falling block deals"
        },
        "fallTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time (in ticks) this block has been falling for"
        },
        "maxFallDamage": {
          "type": "number",
          "format": "double",
          "description": "The maximum amount of damage this block can deal"
        }
      }
    },
    "FireworkEffect": {
      "type": "object",
      "required": ["colors", "fadeColors", "flickers", "shape", "trail"],
      "properties": {
        "shape": {
          "description": "The shape of the firework",
          "$ref": "#/definitions/CatalogType"
        },
        "flickers": {
          "type": "boolean",
          "description": "True if the firework flickers, false otherwise"
        },
        "colors": {
          "type": "array",
          "description": "The colors that make up this firework",
          "items": {
            "$ref": "#/definitions/Color"
          }
        },
        "fadeColors": {
          "type": "array",
          "description": "The fade colors that this firework has",
          "items": {
            "$ref": "#/definitions/Color"
          }
        },
        "trail": {
          "type": "boolean",
          "description": "True if this firework has a trail, false otherwise"
        }
      }
    },
    "FireworkRocketData": {
      "type": "object",
      "required": ["flightModifier"],
      "properties": {
        "flightModifier": {
          "type": "integer",
          "format": "int32",
          "description": "The flight modifier of this firework rocket"
        }
      }
    },
    "FluidStack": {
      "type": "object",
      "required": ["type", "volume"],
      "properties": {
        "volume": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of fluid in this stack"
        },
        "type": {
          "description": "The type of fluid contained within this stack",
          "$ref": "#/definitions/CatalogType"
        },
        "absorption": {
          "type": "number",
          "format": "double"
        },
        "age": {
          "$ref": "#/definitions/AgeableData"
        },
        "aggressive": {
          "type": "boolean"
        },
        "aiEnabled": {
          "type": "boolean"
        },
        "angerLevel": {
          "type": "integer",
          "format": "int32"
        },
        "armorStand": {
          "$ref": "#/definitions/ArmorStandData"
        },
        "art": {
          "$ref": "#/definitions/CatalogType"
        },
        "attached": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "axis": {
          "type": "string",
          "enum": ["X", "Y", "Z"]
        },
        "banner": {
          "$ref": "#/definitions/BannerData"
        },
        "beacon": {
          "$ref": "#/definitions/BeaconData"
        },
        "bigMushroom": {
          "$ref": "#/definitions/CatalogType"
        },
        "block": {
          "$ref": "#/definitions/BlockState"
        },
        "breathing": {
          "$ref": "#/definitions/BreathingData"
        },
        "breedable": {
          "type": "boolean"
        },
        "brewingStand": {
          "$ref": "#/definitions/BrewingStandData"
        },
        "brick": {
          "$ref": "#/definitions/CatalogType"
        },
        "career": {
          "$ref": "#/definitions/Career"
        },
        "charged": {
          "type": "boolean"
        },
        "coal": {
          "$ref": "#/definitions/CatalogType"
        },
        "color": {
          "$ref": "#/definitions/Color"
        },
        "command": {
          "$ref": "#/definitions/CommandData"
        },
        "comparator": {
          "$ref": "#/definitions/CatalogType"
        },
        "connectedDirection": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
          }
        },
        "cookedFish": {
          "$ref": "#/definitions/CatalogType"
        },
        "cooldown": {
          "type": "integer",
          "format": "int32"
        },
        "criticalHit": {
          "type": "boolean"
        },
        "customName": {
          "type": "boolean"
        },
        "damage": {
          "type": "number",
          "format": "double"
        },
        "damageable": {
          "$ref": "#/definitions/DamageableData"
        },
        "decayable": {
          "type": "boolean"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "despawnDelay": {
          "$ref": "#/definitions/DespawnDelayData"
        },
        "direction": {
          "type": "string",
          "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
        },
        "dirt": {
          "$ref": "#/definitions/CatalogType"
        },
        "disarmed": {
          "type": "boolean"
        },
        "disguisedBlock": {
          "$ref": "#/definitions/CatalogType"
        },
        "displayName": {
          "type": "string"
        },
        "dominantHand": {
          "$ref": "#/definitions/CatalogType"
        },
        "doublePlant": {
          "$ref": "#/definitions/CatalogType"
        },
        "drops": {
          "type": "boolean"
        },
        "durability": {
          "$ref": "#/definitions/DurabilityData"
        },
        "dye": {
          "$ref": "#/definitions/DyeColor"
        },
        "enchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "endGateway": {
          "$ref": "#/definitions/EndGatewayData"
        },
        "expOrb": {
          "type": "integer",
          "format": "int32"
        },
        "experience": {
          "$ref": "#/definitions/ExperienceHolderData"
        },
        "expireTicks": {
          "type": "integer",
          "format": "int32"
        },
        "explosionRadius": {
          "type": "integer",
          "format": "int32"
        },
        "extended": {
          "type": "boolean"
        },
        "fallDistance": {
          "type": "number",
          "format": "float"
        },
        "fallingBlock": {
          "$ref": "#/definitions/FallingBlockData"
        },
        "filled": {
          "type": "boolean"
        },
        "fireworkEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FireworkEffect"
          }
        },
        "fireworkRocket": {
          "$ref": "#/definitions/FireworkRocketData"
        },
        "fish": {
          "$ref": "#/definitions/CatalogType"
        },
        "flammable": {
          "type": "boolean"
        },
        "fluid": {
          "$ref": "#/definitions/FluidStack"
        },
        "fluidLevel": {
          "type": "integer",
          "format": "int32"
        },
        "fluidTanks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FluidStack"
            }
          }
        },
        "flying": {
          "type": "boolean"
        },
        "flyingAbility": {
          "type": "boolean"
        },
        "food": {
          "$ref": "#/definitions/FoodData"
        },
        "furnace": {
          "$ref": "#/definitions/FurnaceData"
        },
        "fuse": {
          "$ref": "#/definitions/FuseData"
        },
        "gameMode": {
          "$ref": "#/definitions/GameMode"
        },
        "generation": {
          "type": "integer",
          "format": "int32"
        },
        "glowing": {
          "type": "boolean"
        },
        "goldenApple": {
          "$ref": "#/definitions/CatalogType"
        },
        "griefs": {
          "type": "boolean"
        },
        "growth": {
          "$ref": "#/definitions/GrowthData"
        },
        "health": {
          "$ref": "#/definitions/HealthData"
        },
        "hide": {
          "$ref": "#/definitions/HideData"
        },
        "hinge": {
          "$ref": "#/definitions/CatalogType"
        },
        "horse": {
          "$ref": "#/definitions/HorseData"
        },
        "igniteable": {
          "$ref": "#/definitions/IgniteableData"
        },
        "inWall": {
          "type": "boolean"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "invisibility": {
          "$ref": "#/definitions/InvisibilityData"
        },
        "invulnerability": {
          "$ref": "#/definitions/InvulnerabilityData"
        },
        "joined": {
          "$ref": "#/definitions/JoinData"
        },
        "knockback": {
          "type": "integer",
          "format": "int32"
        },
        "layer": {
          "type": "integer",
          "format": "int32"
        },
        "leash": {
          "$ref": "#/definitions/LeashData"
        },
        "lockToken": {
          "type": "string"
        },
        "logAxis": {
          "$ref": "#/definitions/CatalogType"
        },
        "lore": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minecartBlock": {
          "$ref": "#/definitions/MinecartBlockData"
        },
        "mobSpawner": {
          "$ref": "#/definitions/MobSpawnerData"
        },
        "moisture": {
          "type": "integer",
          "format": "int32"
        },
        "note": {
          "$ref": "#/definitions/CatalogType"
        },
        "occupied": {
          "type": "boolean"
        },
        "ocelot": {
          "$ref": "#/definitions/CatalogType"
        },
        "open": {
          "type": "boolean"
        },
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passengers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "persists": {
          "type": "boolean"
        },
        "pickupDelay": {
          "$ref": "#/definitions/PickupDelayData"
        },
        "pickupRule": {
          "$ref": "#/definitions/CatalogType"
        },
        "pigSaddle": {
          "type": "boolean"
        },
        "piston": {
          "$ref": "#/definitions/CatalogType"
        },
        "placeableOn": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CatalogType"
          }
        },
        "plant": {
          "$ref": "#/definitions/CatalogType"
        },
        "playerCreated": {
          "type": "boolean"
        },
        "playing": {
          "type": "boolean"
        },
        "portion": {
          "$ref": "#/definitions/CatalogType"
        },
        "potionEffects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "powered": {
          "type": "boolean"
        },
        "prismarine": {
          "$ref": "#/definitions/CatalogType"
        },
        "quartz": {
          "$ref": "#/definitions/CatalogType"
        },
        "rabbit": {
          "$ref": "#/definitions/CatalogType"
        },
        "railDirection": {
          "$ref": "#/definitions/CatalogType"
        },
        "redstonePower": {
          "type": "integer",
          "format": "int32"
        },
        "representedItem": {
          "$ref": "#/definitions/ItemStack"
        },
        "representedPlayer": {
          "type": "string"
        },
        "respawnLocations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Location"
          }
        },
        "sand": {
          "$ref": "#/definitions/CatalogType"
        },
        "sandStone": {
          "$ref": "#/definitions/CatalogType"
        },
        "screaming": {
          "type": "boolean"
        },
        "seamless": {
          "type": "boolean"
        },
        "shatters": {
          "type": "boolean"
        },
        "sheared": {
          "type": "boolean"
        },
        "shrub": {
          "$ref": "#/definitions/CatalogType"
        },
        "sign": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silent": {
          "type": "boolean"
        },
        "sitting": {
          "type": "boolean"
        },
        "skin": {
          "type": "string",
          "format": "uuid"
        },
        "skull": {
          "$ref": "#/definitions/CatalogType"
        },
        "slab": {
          "$ref": "#/definitions/CatalogType"
        },
        "sleeping": {
          "type": "boolean"
        },
        "slime": {
          "$ref": "#/definitions/SlimeData"
        },
        "sneaking": {
          "type": "boolean"
        },
        "snow": {
          "type": "boolean"
        },
        "spawn": {
          "$ref": "#/definitions/CatalogType"
        },
        "sprinting": {
          "type": "boolean"
        },
        "stairShape": {
          "$ref": "#/definitions/CatalogType"
        },
        "statistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stat"
          }
        },
        "stone": {
          "$ref": "#/definitions/CatalogType"
        },
        "storedEnchantments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Enchantment"
          }
        },
        "structure": {
          "$ref": "#/definitions/StructureData"
        },
        "stuckArrows": {
          "type": "integer",
          "format": "int32"
        },
        "tamed": {
          "$ref": "#/definitions/TameableData"
        },
        "target": {
          "$ref": "#/definitions/Vector3d"
        },
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TradeOffer"
          }
        },
        "tree": {
          "$ref": "#/definitions/CatalogType"
        },
        "vehicle": {
          "$ref": "#/definitions/VehicleData"
        },
        "wall": {
          "$ref": "#/definitions/CatalogType"
        },
        "wet": {
          "type": "boolean"
        },
        "wires": {
          "$ref": "#/definitions/WireAttachmentData"
        },
        "acceptsItems": {
          "$ref": "#/definitions/AcceptsItems"
        },
        "applicableEffect": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PotionEffect"
          }
        },
        "armorSlotType": {
          "$ref": "#/definitions/ArmorSlotType"
        },
        "armorType": {
          "$ref": "#/definitions/CatalogType"
        },
        "blastResistance": {
          "type": "number",
          "format": "double"
        },
        "burningFuel": {
          "type": "integer",
          "format": "int32"
        },
        "damageAbsorption": {
          "type": "integer",
          "format": "int32"
        },
        "efficiency": {
          "type": "number",
          "format": "double"
        },
        "equipmentType": {
          "$ref": "#/definitions/CatalogType"
        },
        "equiptmentSlotType": {
          "$ref": "#/definitions/EquipmentSlotType"
        },
        "eyeHeight": {
          "type": "number",
          "format": "double"
        },
        "eyeLocation": {
          "$ref": "#/definitions/Vector3d"
        },
        "fluidTemperature": {
          "type": "integer",
          "format": "int32"
        },
        "fluidViscosity": {
          "type": "integer",
          "format": "int32"
        },
        "foodRestoration": {
          "type": "integer",
          "format": "int32"
        },
        "fullBlockSelectionBox": {
          "type": "boolean"
        },
        "gravityAffected": {
          "type": "boolean"
        },
        "groundLuminance": {
          "type": "number",
          "format": "double"
        },
        "guiId": {
          "$ref": "#/definitions/GuiIdProperty"
        },
        "hardness": {
          "type": "number",
          "format": "double"
        },
        "heldItem": {
          "$ref": "#/definitions/CatalogType"
        },
        "identifiable": {
          "$ref": "#/definitions/Identifiable"
        },
        "indirectlyPowered": {
          "type": "boolean"
        },
        "instrument": {
          "$ref": "#/definitions/CatalogType"
        },
        "inventoryCapacity": {
          "$ref": "#/definitions/InventoryCapacity"
        },
        "inventoryDimension": {
          "$ref": "#/definitions/InventoryDimension"
        },
        "inventoryTitle": {
          "$ref": "#/definitions/InventoryTitle"
        },
        "lightEmission": {
          "type": "integer",
          "format": "int32"
        },
        "matter": {
          "type": "string",
          "enum": ["SOLID", "LIQUID", "GAS"]
        },
        "passable": {
          "type": "boolean"
        },
        "record": {
          "$ref": "#/definitions/CatalogType"
        },
        "replaceable": {
          "type": "boolean"
        },
        "saturationProperty": {
          "type": "number",
          "format": "double"
        },
        "skyLuminance": {
          "type": "number",
          "format": "double"
        },
        "slotIndex": {
          "$ref": "#/definitions/SlotIndex"
        },
        "slotPos": {
          "$ref": "#/definitions/SlotPos"
        },
        "slotSide": {
          "$ref": "#/definitions/SlotSide"
        },
        "smeltable": {
          "type": "boolean"
        },
        "solidCube": {
          "type": "boolean"
        },
        "statisticsTracked": {
          "type": "boolean"
        },
        "surrogateBlock": {
          "type": "boolean"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "toolType": {
          "$ref": "#/definitions/CatalogType"
        },
        "unbreakable": {
          "type": "boolean"
        },
        "useLimit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FoodData": {
      "type": "object",
      "required": ["exhaustion", "foodLevel", "saturation"],
      "properties": {
        "foodLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The food level of this entity"
        },
        "saturation": {
          "type": "number",
          "format": "double",
          "description": "The saturation of this entity"
        },
        "exhaustion": {
          "type": "number",
          "format": "double",
          "description": "The exhaustion of this entity"
        }
      }
    },
    "FurnaceData": {
      "type": "object",
      "required": ["maxBurnTime", "maxCookTime", "passedBurnTime", "passedCookTime"],
      "properties": {
        "maxBurnTime": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum amount of time (in ticks) the current fuel item lasts"
        },
        "maxCookTime": {
          "type": "integer",
          "format": "int32",
          "description": "The total amount of time (in ticks) the stack has to cook for to be done"
        },
        "passedBurnTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time (in ticks) that has passed since this fuel item started burning"
        },
        "passedCookTime": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of time (in ticks) that has passed since the item stack started cooking"
        }
      }
    },
    "FuseData": {
      "type": "object",
      "required": ["fuseDuration", "ticksRemaining"],
      "properties": {
        "fuseDuration": {
          "type": "integer",
          "format": "int32",
          "description": "The total amount of time (in ticks) the fuse burns for"
        },
        "ticksRemaining": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of ticks remaining on this fuse"
        }
      }
    },
    "GrowthData": {
      "type": "object",
      "required": ["stage"],
      "properties": {
        "stage": {
          "type": "integer",
          "format": "int32",
          "description": "The current growth stage of this entity"
        }
      }
    },
    "HealthData": {
      "type": "object",
      "required": ["current", "max"],
      "properties": {
        "current": {
          "type": "number",
          "format": "double",
          "description": "The current health of the entity"
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "The maximum health of the entity"
        }
      }
    },
    "HideData": {
      "type": "object",
      "properties": {
        "hideAttributes": {
          "type": "boolean",
          "description": "Gets the 'attributes hidden' state of the item stack"
        },
        "hideCanDestroy": {
          "type": "boolean",
          "description": "Gets the 'can destory hidden' state of the item stack"
        },
        "hideCanPlace": {
          "type": "boolean",
          "description": "Gets the 'can place hidden' state of the item stack"
        },
        "hideEnchantments": {
          "type": "boolean",
          "description": "Gets the 'enchantments hidden' state of the item stack"
        },
        "hideMiscellaneous": {
          "type": "boolean",
          "description": "Gets the 'miscellaneous hidden' state of the item stack"
        },
        "hideUnbreakable": {
          "type": "boolean",
          "description": "Gets the 'unbreakable hidden' state of the item stack"
        }
      }
    },
    "HorseData": {
      "type": "object",
      "required": ["color", "style"],
      "properties": {
        "color": {
          "description": "The color of the horse",
          "$ref": "#/definitions/CatalogType"
        },
        "style": {
          "description": "The style of the horse",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "IgniteableData": {
      "type": "object",
      "required": ["fireDelay", "fireTicks"],
      "properties": {
        "fireDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The delay of the fire"
        },
        "fireTicks": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of ticks the fire will burn for"
        }
      }
    },
    "InvisibilityData": {
      "type": "object",
      "required": ["ignoreCollision", "invisible", "untargetable", "vanish"],
      "properties": {
        "ignoreCollision": {
          "type": "boolean",
          "description": "True if this entity ignores collisions, false otherwise"
        },
        "invisible": {
          "type": "boolean",
          "description": "True if this entity is invisible, false otherwise"
        },
        "untargetable": {
          "type": "boolean",
          "description": "True if this entity is not targetable, false otherwise"
        },
        "vanish": {
          "type": "boolean",
          "description": "True if this entity is vanished, false otherwise"
        }
      }
    },
    "InvulnerabilityData": {
      "type": "object",
      "required": ["ticks"],
      "properties": {
        "ticks": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of ticks this entity will remain invulnerable for"
        }
      }
    },
    "JoinData": {
      "type": "object",
      "required": ["first", "last"],
      "properties": {
        "first": {
          "type": "integer",
          "format": "int64",
          "description": "The first time this entity joined the server"
        },
        "last": {
          "type": "integer",
          "format": "int64",
          "description": "The most recent time this entity joined the server"
        }
      }
    },
    "LeashData": {
      "type": "object",
      "required": ["holder"],
      "properties": {
        "holder": {
          "description": "The holder of this entity's leash",
          "$ref": "#/definitions/Entity"
        }
      }
    },
    "MinecartBlockData": {
      "type": "object",
      "required": ["offset", "state"],
      "properties": {
        "state": {
          "description": "The current state of the block",
          "$ref": "#/definitions/BlockState"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The offset of the block"
        }
      }
    },
    "EntityArchtype": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "description": "The entity type represented by this archtype",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "MobSpawnerData": {
      "type": "object",
      "required": ["maximumNearbyEntities", "maximumSpawnDelay", "minimumSpawnDelay", "nextEntityToSpawn", "possibleEntitiesToSpawn", "remainingDelay", "requiredPlayerRange", "spawnCount", "spawnRange"],
      "properties": {
        "maximumNearbyEntities": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of nearby entities for another mob to spawn"
        },
        "maximumSpawnDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum delay between two consecutive spawns"
        },
        "minimumSpawnDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum delay between two consecutive spawns"
        },
        "nextEntityToSpawn": {
          "description": "The next entity type that will be spawned by this spawner",
          "$ref": "#/definitions/EntityArchtype"
        },
        "possibleEntitiesToSpawn": {
          "type": "array",
          "description": "A weighted table of probability for each entity type to spawn",
          "items": {
            "$ref": "#/definitions/TableEntryEntityArchetype"
          }
        },
        "remainingDelay": {
          "type": "integer",
          "format": "int32",
          "description": "The remaining time until the next spawn attempt"
        },
        "requiredPlayerRange": {
          "type": "integer",
          "format": "int32",
          "description": "The block range within there must be a player to trigger the spawn"
        },
        "spawnCount": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of entities that will spawn in one attempt"
        },
        "spawnRange": {
          "type": "integer",
          "format": "int32",
          "description": "The range from the spawner within which the entities will spawn"
        }
      }
    },
    "TableEntry": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TableEntryEntityArchetype": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PickupDelayData": {
      "type": "object",
      "required": ["delay", "infinite"],
      "properties": {
        "delay": {
          "type": "integer",
          "format": "int32",
          "description": "The delay that entities must wait to pick up this entity"
        },
        "infinite": {
          "type": "boolean",
          "description": "True if other entities can never pick up this entity, false otherwise"
        }
      }
    },
    "PotionEffect": {
      "type": "object",
      "required": ["amplifier", "duration", "type"],
      "properties": {
        "type": {
          "description": "The type of effect this potion represents",
          "$ref": "#/definitions/CatalogType"
        },
        "amplifier": {
          "type": "integer",
          "format": "int32",
          "description": "The aplifier of this potion (I, II, III, IV, V, ...)"
        },
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "The duration this potion lasts for"
        }
      }
    },
    "SlimeData": {
      "type": "object",
      "required": ["size"],
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the slime entity"
        }
      }
    },
    "Stat": {
      "type": "object",
      "properties": {
        "stat": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "StructureData": {
      "type": "object",
      "required": ["author", "ignoreEntities", "integrity", "mode", "position", "powered", "seed", "showAir", "showBoundingBox", "size"],
      "properties": {
        "author": {
          "type": "string",
          "description": "The author of this structure"
        },
        "ignoreEntities": {
          "type": "boolean",
          "description": "True if entities are not part of this structure, false otherwise"
        },
        "integrity": {
          "type": "number",
          "format": "float",
          "description": "The integrity of the structure"
        },
        "mode": {
          "description": "The mode of the structure",
          "$ref": "#/definitions/CatalogType"
        },
        "position": {
          "description": "The position of the structure",
          "$ref": "#/definitions/Vector3i"
        },
        "powered": {
          "type": "boolean",
          "description": "True if the structure is powered, false otherwise"
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "description": "The seed of this structure"
        },
        "showAir": {
          "type": "boolean",
          "description": "True if the air blocks for this structure are shown, false otherwise"
        },
        "showBoundingBox": {
          "type": "boolean",
          "description": "True if the bounding box for this structure is shown, false otherwise"
        },
        "size": {
          "description": "The size of this structure",
          "$ref": "#/definitions/Vector3i"
        }
      }
    },
    "TameableData": {
      "type": "object",
      "required": ["tamed"],
      "properties": {
        "tamed": {
          "type": "boolean",
          "description": "True if this entity is tamed, false otherwise"
        },
        "owner": {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the entity which tamed this entity"
        }
      }
    },
    "TradeOffer": {
      "type": "object",
      "required": ["expired", "firstBuyingItem", "grantsExp", "maxUses", "sellingItem", "uses"],
      "properties": {
        "expired": {
          "type": "boolean",
          "description": "True if this offer is expired, false otherwise"
        },
        "grantsExp": {
          "type": "boolean",
          "description": "True if this trade grants experience when completed, false otherwise"
        },
        "uses": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of times this trade has been used"
        },
        "maxUses": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum amount of times that this trade can be used"
        },
        "firstBuyingItem": {
          "description": "The first item that is required for the trade",
          "$ref": "#/definitions/ItemStack"
        },
        "secondBuyingItem": {
          "description": "The second item that is required for the trade",
          "$ref": "#/definitions/ItemStack"
        },
        "sellingItem": {
          "description": "The item that is received when trading",
          "$ref": "#/definitions/ItemStack"
        }
      }
    },
    "VehicleData": {
      "type": "object",
      "required": ["baseVehicle", "vehicle"],
      "properties": {
        "baseVehicle": {
          "description": "The base vehicle entity",
          "$ref": "#/definitions/EntitySnapshot"
        },
        "vehicle": {
          "description": "The vehicle entity itself",
          "$ref": "#/definitions/EntitySnapshot"
        }
      }
    },
    "WireAttachmentData": {
      "type": "object",
      "required": ["east", "north", "south", "west"],
      "properties": {
        "east": {
          "description": "The type of wire attachment to the east of this entity",
          "$ref": "#/definitions/CatalogType"
        },
        "north": {
          "description": "The type of wire attachment to the north of this entity",
          "$ref": "#/definitions/CatalogType"
        },
        "south": {
          "description": "The type of wire attachment to the south of this entity",
          "$ref": "#/definitions/CatalogType"
        },
        "west": {
          "description": "The type of wire attachment to the west of this entity",
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "AcceptsItems": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogType"
          }
        }
      }
    },
    "ArmorSlotType": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "EquipmentSlotType": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "GuiIdProperty": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/CatalogType"
        }
      }
    },
    "Identifiable": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "InventoryCapacity": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InventoryDimension": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Vector2i"
        },
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "rows": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Vector2i": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer",
          "format": "int32"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        },
        "minAxis": {
          "type": "integer",
          "format": "int32"
        },
        "maxAxis": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InventoryTitle": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SlotIndex": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SlotPos": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Vector2i"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        },
        "x": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SlotSide": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["DELEGATE", "EQUAL", "NOTEQUAL", "GREATER", "GEQUAL", "LESS", "LEQUAL"]
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "enum": ["NORTH", "NORTH_NORTHEAST", "NORTHEAST", "EAST_NORTHEAST", "EAST", "EAST_SOUTHEAST", "SOUTHEAST", "SOUTH_SOUTHEAST", "SOUTH", "SOUTH_SOUTHWEST", "SOUTHWEST", "WEST_SOUTHWEST", "WEST", "WEST_NORTHWEST", "NORTHWEST", "NORTH_NORTHWEST", "UP", "DOWN", "NONE"]
        }
      }
    }
  },
  "parameters": {
    "details": {
      "name": "details",
      "in": "query",
      "description": "Add to include additional details, omit or false otherwise",
      "required": false,
      "type": "boolean"
    },
    "accept": {
      "name": "accept",
      "in": "query",
      "description": "Override the 'Accept' request header (useful for debugging your requests)",
      "required": false,
      "type": "string",
      "enum": ["json", "xml"]
    },
    "pretty": {
      "name": "pretty",
      "in": "query",
      "description": "Add to make the Web-API pretty print the response (useful for debugging your requests)",
      "required": false,
      "type": "boolean"
    }
  },
  "responses": {
    "400": {
      "description": "Bad request",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad request",
            "description": "The error message describing the error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 400,
            "description": "The status code of the error (also provided in the HTTP header)"
          }
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unauthorized",
            "description": "The error message describing the error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 401,
            "description": "The status code of the error (also provided in the HTTP header)"
          }
        }
      }
    },
    "403": {
      "description": "Access denied",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Access denied",
            "description": "The error message describing the error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 403,
            "description": "The status code of the error (also provided in the HTTP header)"
          }
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Not found",
            "description": "The error message describing the error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 404,
            "description": "The status code of the error (also provided in the HTTP header)"
          }
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Internal server error",
            "description": "The error message describing the error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 500,
            "description": "The status code of the error (also provided in the HTTP header)"
          }
        }
      }
    },
    "501": {
      "description": "Not implemented",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Not implemented",
            "description": "The error message describing the error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 501,
            "description": "The status code of the error (also provided in the HTTP header)"
          }
        }
      }
    }
  },
  "x-tagGroups": [{
    "name": "Web-API",
    "tags": ["Block", "Chunk", "Command", "Economy", "Entity", "History", "Info", "Interactive Message", "Map", "Permission", "Player", "Plugin", "Recipe", "Registry", "Server", "Tile Entity", "User", "World"]
  }, {
    "name": "Integrations",
    "tags": ["Active Time", "Husky Crates", "MMC Restrict", "MMC Tickets", "Nucleus", "Red Protect", "Universal Market", "Web Books"]
  }]
}